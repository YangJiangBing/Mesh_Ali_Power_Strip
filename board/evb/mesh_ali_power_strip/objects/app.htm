<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Apr 07 11:20:24 2020
<BR><P>
<H3>Maximum Stack Usage =       1016 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
device_prov_cb &rArr; device_receive &rArr; prov_handle_public_key &rArr; prov_ecdh_secret_gen &rArr; ecdh_shared_secret &rArr; ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[37c]">mesh_flash_clear</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b0]">mesh_flash_init</a><BR>
 <LI><a href="#[38b]">fn_frnd_queue_add_frnd_upd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36f]">mesh_seq_use</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[58]">ADC_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[49]">BTMAC_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[41]">BusFault_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4]">DLPS_IO_EnterDlpsCb</a> from rtl876x_io_dlps.o(.ram.dataon.data) referenced from rtl876x_io_dlps.o(.text)
 <LI><a href="#[5]">DLPS_IO_ExitDlpsCb</a> from rtl876x_io_dlps.o(.ram.dataon.data) referenced from rtl876x_io_dlps.o(.text)
 <LI><a href="#[44]">DebugMon_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[73]">Default_Handler</a> from startup_rtl8762c.o(.text) referenced from system_rtl8762c.o(.app.overlay_a)
 <LI><a href="#[5a]">GDMA0_Channel0_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[5b]">GDMA0_Channel1_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[5c]">GDMA0_Channel2_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[5d]">GDMA0_Channel3_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[5e]">GDMA0_Channel4_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[5f]">GDMA0_Channel5_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4f]">GPIO4_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[50]">GPIO5_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[64]">GPIO_Group0_Handler</a> from system_rtl8762c.o(.ram.dataon.data) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[63]">GPIO_Group1_Handler</a> from system_rtl8762c.o(.ram.dataon.data) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[61]">GPIO_Group2_Handler</a> from system_rtl8762c.o(.ram.dataon.data) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[60]">GPIO_Group3_Handler</a> from system_rtl8762c.o(.ram.dataon.data) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[3f]">HardFault_Handler</a> from startup_rtl8762c.o(.text) referenced 2 times from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[56]">I2C0_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[57]">I2C1_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4d]">I2S0_RX_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4c]">I2S0_TX_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[71]">I2S1_RX_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[70]">I2S1_TX_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[62]">IR_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[6c]">Keyscan_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[72]">LCD_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[6e]">LPCOMP_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[40]">MemManage_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[3e]">NMI_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[6f]">PTA_Mailbox_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[45]">PendSV_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[59]">Peripheral_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[6b]">Qdecode_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[53]">RTC_Handler</a> from strip_timer.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[3d]">Reset_Handler</a> from startup_rtl8762c.o(RESET) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[54]">SPI0_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[55]">SPI1_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[6d]">SPI2W_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[6a]">SPI_Flash_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[43]">SVC_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[46]">SysTick_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[1]">SystemInit</a> from system_rtl8762c.o(.app.flash.text) referenced from startup_rtl8762c.o(RESET)
 <LI><a href="#[47]">System_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4b]">Timer2_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4a]">Timer3_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[4e]">Timer4_7_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[66]">Timer4_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[67]">Timer5_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[68]">Timer6_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[69]">Timer7_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[52]">UART0_Handler</a> from data_uart.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[51]">UART1_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[65]">UART2_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[42]">UsageFault_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[48]">WDG_Handler</a> from startup_rtl8762c.o(.text) referenced from startup_rtl8762c.o(VECTOR)
 <LI><a href="#[28]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[27]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[36]">ais_server_cccd_update_cb</a> from ais_server.o(.text) referenced from ais_server.o(.constdata)
 <LI><a href="#[34]">ais_server_read_cb</a> from ais_server.o(.text) referenced from ais_server.o(.constdata)
 <LI><a href="#[7]">ais_server_timeout_cb</a> from ais_server.o(.text) referenced from ais_server.o(.text)
 <LI><a href="#[35]">ais_server_write_cb</a> from ais_server.o(.text) referenced from ais_server.o(.constdata)
 <LI><a href="#[20f]">ali_server_receive</a> from strip_app.o(.text) referenced from strip_app.o(.text)
 <LI><a href="#[29]">app_cb0_wdg_reset</a> from system_rtl8762c.o(.text) referenced from system_rtl8762c.o(.constdata)
 <LI><a href="#[2a]">app_cb5_dfu_status</a> from system_rtl8762c.o(.text) referenced from system_rtl8762c.o(.constdata)
 <LI><a href="#[15]">app_client_callback</a> from main_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[203]">app_dlps_check_cb</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[200]">app_enter_dlps_config</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[201]">app_exit_dlps_config</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[13]">app_gap_callback</a> from main_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[1d7]">app_main_task</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[14]">app_profile_callback</a> from main_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[1d6]">app_send_uart_msg</a> from app_task.o(.text) referenced from app_task.o(.text)
 <LI><a href="#[376]">attn_timeout_cb</a> from mesh_node.o(.text) referenced from mesh_node.o(.text)
 <LI><a href="#[1a]">beacon_timeout_cb</a> from mesh_beacon.o(.text) referenced from mesh_beacon.o(.text)
 <LI><a href="#[46f]">cfg_server_receive</a> from configuration_server.o(.text) referenced from configuration_server.o(.text)
 <LI><a href="#[19]">change_scan_param_timeout_cb</a> from light_swtimer.o(.text) referenced from light_swtimer.o(.text)
 <LI><a href="#[2]">common_main</a> from system_rtl8762c.o(.text) referenced from system_rtl8762c.o(.app.flash.text)
 <LI><a href="#[153]">delay_execution_handler</a> from delay_execution.o(.text) referenced from delay_execution.o(.text)
 <LI><a href="#[f]">delay_execution_timeout_handle</a> from delay_execution.o(.text) referenced from delay_execution.o(.text)
 <LI><a href="#[3ac]">device_prov_cb</a> from provision_device.o(.text) referenced 2 times from provision_device.o(.text)
 <LI><a href="#[2b]">dfu_attr_write_cb</a> from dfu_server.o(.text) referenced from dfu_server.o(.constdata)
 <LI><a href="#[2c]">dfu_cccd_update_cb</a> from dfu_server.o(.text) referenced from dfu_server.o(.constdata)
 <LI><a href="#[2e]">dfu_client_disc_result_cb</a> from dfu_client.o(.text) referenced from dfu_client.o(.constdata)
 <LI><a href="#[2d]">dfu_client_disc_state_cb</a> from dfu_client.o(.text) referenced from dfu_client.o(.constdata)
 <LI><a href="#[ee]">dfu_client_handle_msg</a> from dfu_client.o(.text) referenced from dfu_client.o(.text)
 <LI><a href="#[31]">dfu_client_notify_indicate_cb</a> from dfu_client.o(.text) referenced from dfu_client.o(.constdata)
 <LI><a href="#[2f]">dfu_client_read_result_cb</a> from dfu_client.o(.text) referenced from dfu_client.o(.constdata)
 <LI><a href="#[30]">dfu_client_write_result_cb</a> from dfu_client.o(.text) referenced from dfu_client.o(.constdata)
 <LI><a href="#[6]">dfu_server_timeout_cb</a> from dfu_server.o(.text) referenced from dfu_server.o(.text)
 <LI><a href="#[37]">dis_attr_read_cb</a> from dis.o(.text) referenced from dis.o(.constdata)
 <LI><a href="#[12]">fn_cb</a> from main_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[1d]">fn_timeout_cb</a> from friendship_fn.o(.text) referenced 2 times from friendship_fn.o(.text)
 <LI><a href="#[427]">frnd_poll_cb</a> from friendship_lpn.o(.text) referenced 2 times from friendship_lpn.o(.text)
 <LI><a href="#[162]">fw_update_server_data_cb</a> from dfu_updater_app.o(.text) referenced from dfu_updater_app.o(.text)
 <LI><a href="#[12e]">fw_update_server_receive</a> from firmware_update_server.o(.text) referenced from firmware_update_server.o(.text)
 <LI><a href="#[26d]">gap_lib_handle_btif_msg</a> from gap_lib.o(.text) referenced from gap_lib.o(.text)
 <LI><a href="#[2bd]">gap_sched_timer_cb</a> from gap_scheduler.o(.text) referenced from gap_scheduler.o(.text)
 <LI><a href="#[b]">generic_on_off_delay_execution</a> from generic_on_off_server.o(.text) referenced from generic_on_off_server.o(.text)
 <LI><a href="#[16]">generic_on_off_server_data</a> from strip_app.o(.text) referenced from strip_app.o(.text)
 <LI><a href="#[d]">generic_on_off_server_publish</a> from generic_on_off_server.o(.text) referenced from generic_on_off_server.o(.text)
 <LI><a href="#[c]">generic_on_off_server_receive</a> from generic_on_off_server.o(.text) referenced from generic_on_off_server.o(.text)
 <LI><a href="#[a]">generic_on_off_trans_step_change</a> from generic_on_off_server.o(.text) referenced from generic_on_off_server.o(.text)
 <LI><a href="#[43a]">hb_timer_cb</a> from heartbeat.o(.text) referenced from heartbeat.o(.text)
 <LI><a href="#[9]">health_server_publish</a> from health_server.o(.text) referenced from health_server.o(.text)
 <LI><a href="#[8]">health_server_receive</a> from health_server.o(.text) referenced from health_server.o(.text)
 <LI><a href="#[373]">iv_index_timeout_cb</a> from mesh_node.o(.text) referenced from mesh_node.o(.text)
 <LI><a href="#[17]">light_ctl_timeout_handle</a> from light_controller_app.o(.text) referenced from light_controller_app.o(.text)
 <LI><a href="#[10]">light_power_on_timeout_cb</a> from dimmable_light.o(.text) referenced from dimmable_light.o(.text)
 <LI><a href="#[189]">light_prov_complete_cb</a> from light_effect_app.o(.text) referenced from light_effect_app.o(.text)
 <LI><a href="#[3]">log_direct</a> from ROM.lib(ABSOLUTE) referenced from startup_rtl8762c.o(.text)
 <LI><a href="#[26]">lpn_timeout_cb</a> from friendship_lpn.o(.text) referenced from friendship_lpn.o(.text)
 <LI><a href="#[35f]">mesh_model_pub_timeout_cb</a> from mesh_node.o(.text) referenced from mesh_node.o(.text)
 <LI><a href="#[322]">mesh_reboot_timer_cb</a> from mesh_common.o(.text) referenced from mesh_common.o(.text)
 <LI><a href="#[1c]">mesh_service_timeout_cb</a> from mesh_service.o(.text) referenced 2 times from mesh_service.o(.text)
 <LI><a href="#[38]">mp_cmd_update_ali_data</a> from mp_cmd.o(.text) referenced from mp_cmd.o(.constdata)
 <LI><a href="#[23]">msg_ack_done</a> from provision_adv.o(.text) referenced from provision_adv.o(.text)
 <LI><a href="#[413]">net_relay_cb</a> from mesh_network.o(.text) referenced from mesh_network.o(.text)
 <LI><a href="#[164]">obj_transfer_server_data_cb</a> from dfu_updater_app.o(.text) referenced from dfu_updater_app.o(.text)
 <LI><a href="#[13d]">obj_transfer_server_receive</a> from object_transfer_server.o(.text) referenced from object_transfer_server.o(.text)
 <LI><a href="#[32]">ota_attr_read_cb</a> from ota_server.o(.text) referenced from ota_server.o(.constdata)
 <LI><a href="#[33]">ota_attr_write_cb</a> from ota_server.o(.text) referenced from ota_server.o(.constdata)
 <LI><a href="#[24]">pb_adv_timeout_cb</a> from provision_adv.o(.text) referenced 2 times from provision_adv.o(.text)
 <LI><a href="#[8e]">pre_main</a> from system_rtl8762c.o(.app.flash.text) referenced from system_rtl8762c.o(.app.flash.text)
 <LI><a href="#[11]">prov_cb</a> from main_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[3a]">prov_server_cccd_update_cb</a> from provision_server.o(.text) referenced from provision_server.o(.constdata)
 <LI><a href="#[1f]">prov_server_handle_disconnect</a> from provision_server.o(.text) referenced from provision_server.o(.text)
 <LI><a href="#[3df]">prov_server_notify</a> from provision_server.o(.text) referenced from provision_server.o(.text)
 <LI><a href="#[39]">prov_server_write_cb</a> from provision_server.o(.text) referenced from provision_server.o(.constdata)
 <LI><a href="#[1e]">prov_service_receive</a> from provision_service.o(.text) referenced from provision_server.o(.text)
 <LI><a href="#[332]">prov_timeout_cb</a> from mesh_provision.o(.text) referenced from mesh_provision.o(.text)
 <LI><a href="#[25]">proxy_rx_timeout_cb</a> from proxy_protocol.o(.text) referenced from proxy_protocol.o(.text)
 <LI><a href="#[3c]">proxy_server_cccd_update_cb</a> from proxy_server.o(.text) referenced from proxy_server.o(.constdata)
 <LI><a href="#[21]">proxy_server_handle_disconnect</a> from proxy_server.o(.text) referenced from proxy_server.o(.text)
 <LI><a href="#[3e5]">proxy_server_notify</a> from proxy_server.o(.text) referenced from proxy_server.o(.text)
 <LI><a href="#[3b]">proxy_server_write_cb</a> from proxy_server.o(.text) referenced from proxy_server.o(.constdata)
 <LI><a href="#[20]">proxy_service_receive</a> from proxy_service.o(.text) referenced from proxy_server.o(.text)
 <LI><a href="#[1b]">tick_timer_cb</a> from mesh_common.o(.text) referenced from mesh_common.o(.text)
 <LI><a href="#[3f5]">trans_send_seg</a> from mesh_transport.o(.text) referenced from mesh_transport.o(.text)
 <LI><a href="#[e]">trans_time_timeout_handle</a> from generic_transition_time.o(.text) referenced from generic_transition_time.o(.text)
 <LI><a href="#[22]">trans_timeout_cb</a> from mesh_transport.o(.text) referenced from mesh_transport.o(.text)
 <LI><a href="#[18]">unprov_timeout_cb</a> from light_swtimer.o(.text) referenced from light_swtimer.o(.text)
 <LI><a href="#[221]">vTimerReportCallback</a> from strip_timer.o(.text) referenced from strip_timer.o(.text)
 <LI><a href="#[220]">vTimerUpdateCallback</a> from strip_timer.o(.text) referenced from strip_timer.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[252]"></a>get_active_ota_bank_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
</UL>

<P><STRONG><a name="[10e]"></a>SHA256_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[10f]"></a>SHA256_Update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[110]"></a>SHA256_Final</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[49f]"></a>RamVectorTableInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
</UL>

<P><STRONG><a name="[9b]"></a>SystemCall</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
</UL>

<P><STRONG><a name="[87]"></a>btxfcs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_parse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_response
</UL>

<P><STRONG><a name="[88]"></a>platform_random</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[3]"></a>log_direct</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enter_dlps_config
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sort
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_valid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAC
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_list
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pub_evt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_tim_set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_prd_set
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_version_check
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_find_item
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_check_header_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>log_buffer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_add
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_cccd_update_cb
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_write_cb
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_notify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_adv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_server_add
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_write_cb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_add
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_adv_pkt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_data_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_cccd_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_read_by_uuid
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_read_by_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_start_discovery
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_read_result_cb
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_result_cb
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_state_cb
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_flash_erase
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_add
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cccd_update_cb
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_attr_write_cb
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_adv_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_start
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_time_timeout_handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_time_insert
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_reg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_load
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_transfer_start
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_reg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_add_service
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_attr_read_cb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_client_callback
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgr_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swTimerInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_parse
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_write
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_load
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timeout_handle
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_scan_param_timer_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_stop
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_start
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_appdefine_blank
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_dev_state_evt
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_mtu_info_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_param_update_evt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_authen_state_evt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_update_ali_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_srand
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compo_data_page0_gen
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_quit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_available
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_dev_bond_info
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_sec_level
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_rand_addr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_check_privacy_bond
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_handle_disconnect_rsp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_gen
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k4
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k3
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_key_gen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_key_gen
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timeout_cb
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_update
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_add
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_add
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_hash_gen
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_timeout_cb
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_disconnect
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_allocate
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timeout_cb
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_crypto
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_keys_gen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_conf_keys_gen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecdh_secret_gen
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_validate
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_handle_timeout
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_handle_timeout
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_timer_cb
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update_try
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send_via_proxy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dispatch
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_counter_gen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nonce_gen
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_encrypt
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_check
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_ping_pong_msg
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_check
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_msg
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_cache_pkt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nonce_gen
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_encrypt
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_decrypt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_need_retransmit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_ctx_find1
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_start
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_notify
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_cccd_update_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_write_cb
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_allocate
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_receive
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_cccd_update_cb
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_notify
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_write_cb
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_send
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_close
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_confirmation
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_start
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_invite
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_clear
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear_conf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_remove
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_add
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_delete
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_update
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_stop
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_start
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_cb
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_req
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_offer
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll_cb
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ack
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_close
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_nonce_gen
</UL>

<P><STRONG><a name="[234]"></a>trace_bdaddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_rand_addr
</UL>

<P><STRONG><a name="[92]"></a>trace_string</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[e0]"></a>trace_binary</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_notify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_transfer_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compo_data_page0_gen
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_gen
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k4
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k3
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_key_gen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_key_gen
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_hash_gen
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_crypto
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_keys_gen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_conf_keys_gen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecdh_secret_gen
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send_via_proxy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dispatch
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_counter_gen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nonce_gen
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_encrypt
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nonce_gen
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_encrypt
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_decrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_nonce_gen
</UL>

<P><STRONG><a name="[99]"></a>log_module_trace_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[1e7]"></a>log_module_trace_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[1e6]"></a>log_module_bitmap_trace_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[206]"></a>dlps_check_cb_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgr_init
</UL>

<P><STRONG><a name="[a6]"></a>dlps_hw_control_cb_reg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IORegister
</UL>

<P><STRONG><a name="[207]"></a>lps_mode_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgr_init
</UL>

<P><STRONG><a name="[3bc]"></a>aes128_ecb_encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_hash_gen
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[ea]"></a>aes256_ecb_encrypt_msb2lsb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_encrypt
</UL>

<P><STRONG><a name="[ad]"></a>aes256_ecb_decrypt_msb2lsb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_decrypt
</UL>

<P><STRONG><a name="[ca]"></a>flash_lock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[cc]"></a>flash_unlock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[48b]"></a>flash_get_block_protect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_new
</UL>

<P><STRONG><a name="[487]"></a>flash_set_block_protect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect_locked
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_new
</UL>

<P><STRONG><a name="[15f]"></a>ftl_load</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore_node_state
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_load
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>

<P><STRONG><a name="[161]"></a>ftl_save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_write
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_clear
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>

<P><STRONG><a name="[48a]"></a>flash_get_flash_exist</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_new
</UL>

<P><STRONG><a name="[251]"></a>flash_get_bank_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
</UL>

<P><STRONG><a name="[250]"></a>flash_get_bank_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
</UL>

<P><STRONG><a name="[21e]"></a>flash_erase_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sort
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_valid
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_write_ali_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_list
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
</UL>

<P><STRONG><a name="[8d]"></a>flash_ioctl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_try_high_speed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
</UL>

<P><STRONG><a name="[21f]"></a>flash_write_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_write_ali_data
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
</UL>

<P><STRONG><a name="[255]"></a>flash_auto_write_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
</UL>

<P><STRONG><a name="[224]"></a>flash_auto_write_buffer_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sort
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_valid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_list
</UL>

<P><STRONG><a name="[21d]"></a>flash_read_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_secret_key
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_product_id
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_contains_ali_data
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>

<P><STRONG><a name="[256]"></a>flash_auto_read_locked</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_appdefine_blank
</UL>

<P><STRONG><a name="[94]"></a>check_hci_mode_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[259]"></a>check_image_chksum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[253]"></a>check_header_valid</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
</UL>

<P><STRONG><a name="[b1]"></a>get_header_addr_by_img_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_get_image_ver
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_adv_send
</UL>

<P><STRONG><a name="[24f]"></a>is_ota_support_bank_switch</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
</UL>

<P><STRONG><a name="[24d]"></a>get_temp_ota_bank_addr_by_img_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_flash_erase
</UL>

<P><STRONG><a name="[229]"></a>NVIC_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[175]"></a>Pinmux_Config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
</UL>

<P><STRONG><a name="[174]"></a>Pad_Config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_io_on_off_pin_exit_dlps_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_io_on_off_pin_enter_dlps_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_light_enter_dlps_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_dlps_config
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
</UL>

<P><STRONG><a name="[22f]"></a>RTC_WriteReg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
</UL>

<P><STRONG><a name="[225]"></a>RTC_SetPrescaler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[226]"></a>RTC_SetComp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[22a]"></a>RTC_RunCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unix2UTC
</UL>

<P><STRONG><a name="[227]"></a>RTC_MaskINTConfig</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[228]"></a>RTC_CompINTConfig</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[22e]"></a>RTC_GetINTStatus</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>

<P><STRONG><a name="[97]"></a>WDG_Disable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[3b6]"></a>btif_vendor_cmd_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_modify_bt_le_fw_policy
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_measure_master_clk_freq_mode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_cmd_req
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_lps_bootup_active_time
</UL>

<P><STRONG><a name="[27b]"></a>btif_just_work_req_cfm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_just_work_confirm
</UL>

<P><STRONG><a name="[277]"></a>btif_sw_reset_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sw_reset_req
</UL>

<P><STRONG><a name="[282]"></a>btif_le_disconn_cfm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_handle_disconnect_ind
</UL>

<P><STRONG><a name="[27d]"></a>btif_le_gen_rand_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_rand_addr
</UL>

<P><STRONG><a name="[9e]"></a>os_mem_alloc_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_cccd_update_cb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_time_insert
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_reg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_load
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_stat
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_info_stat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_reg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_stat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_transparent_msg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg_raw
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_get
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compo_data_page0_gen
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_reg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_update
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_allocate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_allocate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_add
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_get
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_get
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_app_list
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_list
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_list
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_list
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_compo_data_stat
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_add_remove_addr
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_add_addr
</UL>

<P><STRONG><a name="[a0]"></a>os_mem_zalloc_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
</UL>

<P><STRONG><a name="[a2]"></a>os_mem_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_disconnect_cb
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_time_timeout_handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_clear
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_stat
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_abort
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_info_stat
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_apply
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_stat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_transparent_msg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg_raw
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_stop
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_deinit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_unsub
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_delete
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_refresh
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_deinit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_deinit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_deinit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_deinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_loopback_receive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_free
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_free
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_deinit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_clear
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_remove
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_get
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_get
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_app_list
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_list
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_list
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_list
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_compo_data_stat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_deinit
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_add_remove_addr
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_remove_addr
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_sar
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_clear
</UL>

<P><STRONG><a name="[1d8]"></a>os_msg_queue_create_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_os_queue_create
</UL>

<P><STRONG><a name="[b3]"></a>os_msg_send_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timeout_cb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_timeout_cb
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_uart_msg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>

<P><STRONG><a name="[1df]"></a>os_msg_recv_intern</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[cd]"></a>os_delay</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>

<P><STRONG><a name="[98]"></a>os_sched_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>os_lock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_stop
</UL>

<P><STRONG><a name="[c0]"></a>os_unlock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_stop
</UL>

<P><STRONG><a name="[486]"></a>os_sem_take</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock_new
</UL>

<P><STRONG><a name="[48c]"></a>os_sem_give</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock_new
</UL>

<P><STRONG><a name="[298]"></a>os_mutex_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_mutex_create
</UL>

<P><STRONG><a name="[1e4]"></a>os_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_init
</UL>

<P><STRONG><a name="[29a]"></a>os_timer_id_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_get_id
</UL>

<P><STRONG><a name="[222]"></a>os_timer_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swTimerInit
</UL>

<P><STRONG><a name="[b6]"></a>os_timer_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timer_start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_timer_start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_start
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swTimerInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_count_check
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_scan_param_timer_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_start
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_timer_start
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_start
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timer_restart
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_cache_pkt
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_start
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_start
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_req
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_open
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_sar
</UL>

<P><STRONG><a name="[11e]"></a>os_timer_restart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_start
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_handle_pub_timeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_timeout_cb
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_send
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_start
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_req
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_offer
</UL>

<P><STRONG><a name="[25c]"></a>os_timer_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_stop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_timeout_handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_stop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timer_stop
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
</UL>

<P><STRONG><a name="[b8]"></a>os_timer_delete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timer_stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_timer_stop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_stop
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_timeout_cb
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_stop
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_deinit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_deinit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_stop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_stop
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_deinit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_rr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_deinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_handle_pub_timeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_deinit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_stop
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_stop
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_stop
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_deinit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear_conf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_stop
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_deinit
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_ctx_clear
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_free
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_clear
</UL>

<P><STRONG><a name="[267]"></a>os_timer_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_get_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
</UL>

<P><STRONG><a name="[d2]"></a>dfu_report_target_ic_type</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>

<P><STRONG><a name="[c2]"></a>dfu_flash_erase</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
</UL>

<P><STRONG><a name="[c8]"></a>dfu_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_reset
</UL>

<P><STRONG><a name="[c9]"></a>dfu_fw_active_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>

<P><STRONG><a name="[ba]"></a>dfu_checkbufcrc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
</UL>

<P><STRONG><a name="[bf]"></a>dfu_flash_check_blank</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
</UL>

<P><STRONG><a name="[cb]"></a>dfu_check_checksum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[325]"></a>ecc_make_key</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
</UL>

<P><STRONG><a name="[274]"></a>gap_register_extend_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_init
</UL>

<P><STRONG><a name="[1d9]"></a>gap_start_bt_stack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1e0]"></a>gap_handle_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1f7]"></a>gap_set_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_gap_init
</UL>

<P><STRONG><a name="[f7]"></a>gap_get_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_adv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_attr_read_cb
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_dev_state_evt
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
</UL>

<P><STRONG><a name="[293]"></a>le_bond_delete_by_idx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[1f8]"></a>le_bond_set_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_gap_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[23d]"></a>le_bond_oob_input_confirm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[23b]"></a>le_bond_get_display_key</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[23c]"></a>le_bond_passkey_display_confirm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[20a]"></a>le_gap_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f9]"></a>le_register_app_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_gap_init
</UL>

<P><STRONG><a name="[2d5]"></a>le_set_gap_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
</UL>

<P><STRONG><a name="[2d1]"></a>le_get_gap_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
</UL>

<P><STRONG><a name="[278]"></a>gap_send_dev_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_sw_reset_rsp
</UL>

<P><STRONG><a name="[235]"></a>le_set_data_len</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[281]"></a>le_link_release</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
</UL>

<P><STRONG><a name="[27f]"></a>le_link_find_by_link_id</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
</UL>

<P><STRONG><a name="[d1]"></a>le_get_conn_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_param_update_evt
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
</UL>

<P><STRONG><a name="[276]"></a>le_get_active_link_num</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sw_reset_req
</UL>

<P><STRONG><a name="[2d2]"></a>le_get_conn_info</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
</UL>

<P><STRONG><a name="[f0]"></a>le_get_conn_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_connecting
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_sec_level
</UL>

<P><STRONG><a name="[ce]"></a>le_disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_disconnect
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_handle_timeout
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_receive
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[d0]"></a>le_update_conn_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>

<P><STRONG><a name="[f3]"></a>le_set_conn_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_adv_pkt
</UL>

<P><STRONG><a name="[f4]"></a>le_connect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_adv_pkt
</UL>

<P><STRONG><a name="[1fd]"></a>client_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[1fe]"></a>client_register_general_client_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[f6]"></a>client_register_spec_client_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_add
</UL>

<P><STRONG><a name="[d8]"></a>client_by_uuid128_srv_discovery</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_start_discovery
</UL>

<P><STRONG><a name="[e2]"></a>client_all_char_discovery</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_state_cb
</UL>

<P><STRONG><a name="[e4]"></a>client_all_char_descriptor_discovery</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_state_cb
</UL>

<P><STRONG><a name="[da]"></a>client_attr_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_read_by_handle
</UL>

<P><STRONG><a name="[dc]"></a>client_attr_read_using_uuid</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_read_by_uuid
</UL>

<P><STRONG><a name="[de]"></a>client_attr_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_data_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_cccd_set
</UL>

<P><STRONG><a name="[271]"></a>client_handle_btif_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[1fb]"></a>server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[1fc]"></a>server_register_app_cb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[d6]"></a>server_add_service</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_add
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_server_add
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_add
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_add_service
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_add
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_add
</UL>

<P><STRONG><a name="[c3]"></a>server_send_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_notify
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_notify
</UL>

<P><STRONG><a name="[284]"></a>le_find_key_entry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_sec_level
</UL>

<P><STRONG><a name="[291]"></a>le_allocate_key_entry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[27a]"></a>le_get_key</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_sec_level
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_check_privacy_bond
</UL>

<P><STRONG><a name="[292]"></a>le_get_low_priority_bond</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[290]"></a>le_find_entry_by_aes</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[295]"></a>bond_priority_queue_add</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[294]"></a>imp_flash_save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[286]"></a>imp_flash_load</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_dev_bond_info
</UL>

<P><STRONG><a name="[288]"></a>flash_load_le_remote_bd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[289]"></a>flash_load_le_local_ltk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[28a]"></a>flash_load_le_remote_ltk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[28b]"></a>flash_load_le_remote_irk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[28c]"></a>flash_load_le_local_csrk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[28d]"></a>flash_load_le_remote_csrk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[28e]"></a>flash_read_le_cccd_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[2c6]"></a>le_adv_set_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init_gap_params
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv
</UL>

<P><STRONG><a name="[2c7]"></a>le_adv_update_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv
</UL>

<P><STRONG><a name="[2c5]"></a>le_vendor_one_shot_adv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv_params_set_done
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv_done
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv
</UL>

<P><STRONG><a name="[2c2]"></a>le_scan_set_param</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init_gap_params
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_interwave_scan_start
</UL>

<P><STRONG><a name="[2c3]"></a>le_scan_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_interwave_scan_start
</UL>

<P><STRONG><a name="[2c9]"></a>le_scan_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_quit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>

<P><STRONG><a name="[280]"></a>gap_send_conn_state_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
</UL>

<P><STRONG><a name="[91]"></a>setlocale</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[e6]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_contains_ali_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_connecting
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_result_cb
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_transfer_start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_apply
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_abort
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_start
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_scenario_index
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_rand_addr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_check_privacy_bond
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_get_index
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_find_item
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_random
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
</UL>

<P><STRONG><a name="[29f]"></a>strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_hex_to_bin
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ic_euid
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_transfer_start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_stat
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_info_stat
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_transparent_msg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg_raw
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_get
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_value_set
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_params_set
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_uuid_set
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_set
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_add
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_params_get
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_keys_gen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_conf_key_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_random
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_confirmation
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_public_key
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_list
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_compo_data_stat
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_add_rm
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_open
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_srv_cb
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_subscription_set
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAC
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_vsprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind_all
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_hex_to_bin
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_dev_bond_info
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_invite
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_reg
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_deinit
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_deinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_deinit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_init
</UL>

<P><STRONG><a name="[82]"></a>exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ROM.lib(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[60]"></a>GPIO_Group3_Handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_rtl8762c.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO7_Handler
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO31_Handler
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO27_Handler
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO23_Handler
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO19_Handler
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO15_Handler
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[61]"></a>GPIO_Group2_Handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_rtl8762c.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group2_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO6_Handler
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO30_Handler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO26_Handler
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO22_Handler
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO18_Handler
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO14_Handler
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[63]"></a>GPIO_Group1_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_rtl8762c.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Group1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO9_Handler
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO29_Handler
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO25_Handler
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO21_Handler
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO17_Handler
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[64]"></a>GPIO_Group0_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_rtl8762c.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_Group0_Handler &rArr; GPIO20_Handler &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO8_Handler
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO28_Handler
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO24_Handler
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO16_Handler
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO12_Handler
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4]"></a>DLPS_IO_EnterDlpsCb</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, rtl876x_io_dlps.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLPS_IO_EnterDlpsCb
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DLPS_Enter
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtl876x_io_dlps.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>DLPS_IO_ExitDlpsCb</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, rtl876x_io_dlps.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLPS_IO_ExitDlpsCb &rArr; UART_DLPS_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DLPS_Exit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DLPS_Exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtl876x_io_dlps.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_rtl8762c.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_main
</UL>

<P><STRONG><a name="[47c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[76]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[4c0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[4c1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4c2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[4c3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4c5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[4c6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4c7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4c8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4c9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[4ca]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4cb]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4cc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4cd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4ce]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4cf]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4d0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4d1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4d2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4d3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[4d4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[75]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4d5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4d6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[80]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mesh_stack_init &rArr; mesh_init &rArr; mesh_flash_restore &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[83]"></a>ram_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system_rtl8762c.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[86]"></a>random_seed_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, system_rtl8762c.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = random_seed_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btxfcs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[8b]"></a>print_reset_reason</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_rtl8762c.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_reset_reason
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ioctl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[8e]"></a>pre_main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, system_rtl8762c.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pre_main &rArr; AppUpdateVectorTable
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_overlay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_reset_reason
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdateVectorTable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_rtl8762c.o(.app.flash.text)
</UL>
<P><STRONG><a name="[1]"></a>SystemInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_rtl8762c.o(.app.flash.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_config_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_hci_mode_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>bt_stack_config_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.app.flash.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_config_bt_report_buf_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4d8]"></a>gap_config_le_link_number</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>gap_config_bt_bd_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4da]"></a>gap_config_ae_parameter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4db]"></a>gap_config_cccd_not_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>gap_config_le_min_rem_sca</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>gap_config_bte_pool_size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[96]"></a>gap_config_bt_report_buf_num</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_config_init
</UL>

<P><STRONG><a name="[4de]"></a>gap_config_ccc_bits_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4df]"></a>gap_config_max_attribute_table_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>gap_config_max_mtu_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>gap_config_le_key_storage_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>gap_config_max_le_paired_device</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>gap_config_bqb_en</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>gap_config_l2c_param</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_config.o(.app.flash.text), UNUSED)

<P><STRONG><a name="[8a]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gen_rand_addr
</UL>

<P><STRONG><a name="[58]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[49]"></a>BTMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[41]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[44]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[73]"></a>Default_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system_rtl8762c.o(.app.overlay_a)
</UL>
<P><STRONG><a name="[5a]"></a>GDMA0_Channel0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[5b]"></a>GDMA0_Channel1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[5c]"></a>GDMA0_Channel2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[5d]"></a>GDMA0_Channel3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[5e]"></a>GDMA0_Channel4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[5f]"></a>GDMA0_Channel5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4b7]"></a>GPIO0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[4aa]"></a>GPIO10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a2]"></a>GPIO11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4b9]"></a>GPIO12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[4b2]"></a>GPIO13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4ab]"></a>GPIO14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a3]"></a>GPIO15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4ba]"></a>GPIO16_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[4b3]"></a>GPIO17_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4ac]"></a>GPIO18_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a4]"></a>GPIO19_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4b0]"></a>GPIO1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4b4]"></a>GPIO21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4ad]"></a>GPIO22_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a5]"></a>GPIO23_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4bb]"></a>GPIO24_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[4b5]"></a>GPIO25_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4ae]"></a>GPIO26_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a6]"></a>GPIO27_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4bc]"></a>GPIO28_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[4b6]"></a>GPIO29_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[4a8]"></a>GPIO2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4af]"></a>GPIO30_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a7]"></a>GPIO31_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4a0]"></a>GPIO3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4f]"></a>GPIO4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[50]"></a>GPIO5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4a9]"></a>GPIO6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group2_Handler
</UL>

<P><STRONG><a name="[4a1]"></a>GPIO7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group3_Handler
</UL>

<P><STRONG><a name="[4b8]"></a>GPIO8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[4b1]"></a>GPIO9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group1_Handler
</UL>

<P><STRONG><a name="[3f]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[56]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[57]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4d]"></a>I2S0_RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4c]"></a>I2S0_TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[71]"></a>I2S1_RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[70]"></a>I2S1_TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[62]"></a>IR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[6c]"></a>Keyscan_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[72]"></a>LCD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[6e]"></a>LPCOMP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[40]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[3e]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[6f]"></a>PTA_Mailbox_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[45]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[59]"></a>Peripheral_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[6b]"></a>Qdecode_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[54]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[55]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[6d]"></a>SPI2W_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[6a]"></a>SPI_Flash_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[43]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[46]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[47]"></a>System_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4b]"></a>Timer2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4a]"></a>Timer3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[4e]"></a>Timer4_7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[66]"></a>Timer4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[67]"></a>Timer5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[68]"></a>Timer6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[69]"></a>Timer7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[51]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[65]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[42]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[48]"></a>WDG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[7d]"></a>__user_setup_stackheap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2]"></a>common_main</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_rtl8762c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = common_main
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Disable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_module_trace_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_rtl8762c.o(.app.flash.text)
</UL>
<P><STRONG><a name="[9a]"></a>WDG_SystemReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_rtl8762c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCall
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[9c]"></a>flash_try_high_speed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system_rtl8762c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ioctl
</UL>

<P><STRONG><a name="[9d]"></a>malloc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_rtl8762c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>

<P><STRONG><a name="[9f]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_rtl8762c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc_intern
</UL>

<P><STRONG><a name="[a1]"></a>realloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_rtl8762c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>

<P><STRONG><a name="[a3]"></a>free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_rtl8762c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>

<P><STRONG><a name="[29]"></a>app_cb0_wdg_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system_rtl8762c.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>app_cb5_dfu_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_rtl8762c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system_rtl8762c.o(.constdata)
</UL>
<P><STRONG><a name="[4e5]"></a>get_cpu_clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_rtl8762c.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>get_ic_euid</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_rtl8762c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4e6]"></a>get_ic_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_rtl8762c.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>DLPS_IORegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtl876x_io_dlps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLPS_IORegister
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlps_hw_control_cb_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgr_init
</UL>

<P><STRONG><a name="[a8]"></a>RCC_PeriphClockCmd</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, rtl876x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_driver_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_baudrate
</UL>

<P><STRONG><a name="[4e7]"></a>RCC_SPIClkDivConfig</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>RCC_I2CClkDivConfig</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>RCC_UARTClkDivConfig</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>RCC_PeriClockConfig</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>RCC_PeriFunctionConfig</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rtl876x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>TIM_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>

<P><STRONG><a name="[177]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, rtl876x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
</UL>

<P><STRONG><a name="[176]"></a>TIM_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
</UL>

<P><STRONG><a name="[178]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
</UL>

<P><STRONG><a name="[4ec]"></a>TIM_ChangePeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>TIM_INTConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_tim.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>TIM_PWMChangeFreqAndDuty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtl876x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[2b5]"></a>UART_Init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, rtl876x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_baudrate
</UL>

<P><STRONG><a name="[a9]"></a>UART_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_baudrate
</UL>

<P><STRONG><a name="[2b4]"></a>UART_StructInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_baudrate
</UL>

<P><STRONG><a name="[2b2]"></a>UART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[2b8]"></a>UART_SendData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_char
</UL>

<P><STRONG><a name="[2b1]"></a>UART_INTConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_baudrate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[2b3]"></a>UART_GetFlagState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_char
</UL>

<P><STRONG><a name="[4ee]"></a>UART_LoopBackCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>UART_ChangeBaudRate</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>UART_ChangeParams</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtl876x_uart.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>GPIO_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>

<P><STRONG><a name="[1b5]"></a>GPIO_Init</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
</UL>

<P><STRONG><a name="[1b3]"></a>GPIO_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
</UL>

<P><STRONG><a name="[4f1]"></a>GPIO_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>GPIO_ClearINTPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_Handler
</UL>

<P><STRONG><a name="[216]"></a>GPIO_MaskINTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>GPIO_GetPin</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_on_off_pin_cmd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_Handler
</UL>

<P><STRONG><a name="[4f2]"></a>GPIO_GetNum</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>GPIO_DBClkCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtl876x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>dfu_decrypt</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dfu_decrypt &rArr; plt_swap2
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_ecb_decrypt_msb2lsb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap2
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
</UL>

<P><STRONG><a name="[ae]"></a>dfu_server_adv_send</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dfu_server_adv_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_link_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[b4]"></a>dfu_server_timer_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfu_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>

<P><STRONG><a name="[b7]"></a>dfu_server_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfu_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>

<P><STRONG><a name="[b9]"></a>dfu_server_buffer_check</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dfu_server_buffer_check &rArr; sil_dfu_update &rArr; check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_check_blank
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_checkbufcrc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_flash_erase
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_unlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_lock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_flash_erase
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>

<P><STRONG><a name="[c4]"></a>dfu_server_handle_cp</STRONG> (Thumb, 1464 bytes, Stack size 88 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfu_server_handle_cp &rArr; dfu_server_buffer_check &rArr; sil_dfu_update &rArr; check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_update_conn_param
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_active_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_report_target_ic_type
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_attr_write_cb
</UL>

<P><STRONG><a name="[d3]"></a>dfu_server_handle_data</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dfu_server_handle_data &rArr; sil_dfu_update &rArr; check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_fw_active_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_attr_write_cb
</UL>

<P><STRONG><a name="[2b]"></a>dfu_attr_write_cb</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dfu_attr_write_cb &rArr; dfu_server_handle_cp &rArr; dfu_server_buffer_check &rArr; sil_dfu_update &rArr; check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_server.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>dfu_cccd_update_cb</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_server.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>dfu_server_disconnect_cb</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dfu_server_disconnect_cb &rArr; gap_sched_scan &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[d5]"></a>dfu_server_add</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_server_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[e5]"></a>dfu_client_handle_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dfu_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_result_cb
</UL>

<P><STRONG><a name="[4f4]"></a>dfu_client_handle_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfu_client.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>dfu_client_start_discovery</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_client_start_discovery
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_by_uuid128_srv_discovery
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_connect
</UL>

<P><STRONG><a name="[d9]"></a>dfu_client_read_by_handle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dfu_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[db]"></a>dfu_client_read_by_uuid</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfu_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_read_using_uuid
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[dd]"></a>dfu_client_cp_cccd_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfu_client_cp_cccd_set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
</UL>

<P><STRONG><a name="[df]"></a>dfu_client_cp_write</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_client_cp_write
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
</UL>

<P><STRONG><a name="[e1]"></a>dfu_client_data_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfu_client_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_attr_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
</UL>

<P><STRONG><a name="[e8]"></a>dfu_client_disconnect_cb</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dfu_client_disconnect_cb &rArr; gap_sched_scan &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[e9]"></a>dfu_encrypt</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dfu_encrypt &rArr; plt_swap2
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_ecb_encrypt_msb2lsb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap2
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
</UL>

<P><STRONG><a name="[ec]"></a>dfu_client_crc_cal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_client_crc_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
</UL>

<P><STRONG><a name="[eb]"></a>dfu_client_push_image</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dfu_client_push_image &rArr; data_uart_debug &rArr; data_uart_vsprintf &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_crc_cal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_encrypt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_data_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
</UL>

<P><STRONG><a name="[ed]"></a>dfu_client_handle_cp_msg</STRONG> (Thumb, 764 bytes, Stack size 80 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dfu_client_handle_cp_msg &rArr; dfu_client_push_image &rArr; data_uart_debug &rArr; data_uart_vsprintf &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_encrypt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
</UL>

<P><STRONG><a name="[ee]"></a>dfu_client_handle_msg</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dfu_client_handle_msg &rArr; dfu_client_handle_cp_msg &rArr; dfu_client_push_image &rArr; data_uart_debug &rArr; data_uart_vsprintf &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_cp_cccd_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_client.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>dfu_client_handle_connecting</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_client_handle_connecting
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[f1]"></a>dfu_client_handle_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_client_handle_connect &rArr; dfu_client_start_discovery
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_start_discovery
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[f2]"></a>dfu_client_handle_adv_pkt</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, dfu_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_connect
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_conn_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
</UL>

<P><STRONG><a name="[f5]"></a>dfu_client_add</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dfu_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_register_spec_client_cb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_init
</UL>

<P><STRONG><a name="[33]"></a>ota_attr_write_cb</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ota_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ota_attr_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_server.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>ota_attr_read_cb</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, ota_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ota_attr_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_server.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>ota_server_add</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ota_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ota_server_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[f9]"></a>ais_server_timer_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ais_server_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_add
</UL>

<P><STRONG><a name="[fa]"></a>ais_server_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ais_server_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
</UL>

<P><STRONG><a name="[fb]"></a>ais_server_adv</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ais_server_adv &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_link_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[fc]"></a>ais_server_send</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_notify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
</UL>

<P><STRONG><a name="[ff]"></a>ais_server_indicate</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ais_server_indicate &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_device_exception
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_device_resp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_device_report
</UL>

<P><STRONG><a name="[100]"></a>ais_server_send_device_report</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ais_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
</UL>

<P><STRONG><a name="[101]"></a>ais_server_send_device_resp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ais_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
</UL>

<P><STRONG><a name="[102]"></a>ais_server_send_device_exception</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ais_server_send_device_exception &rArr; ais_server_indicate &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
</UL>

<P><STRONG><a name="[103]"></a>ais_server_send_resp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ais_server_send_resp &rArr; ais_server_indicate &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
</UL>

<P><STRONG><a name="[104]"></a>ais_server_notify</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ais_server_notify &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_ota_msg
</UL>

<P><STRONG><a name="[105]"></a>ais_server_send_ota_msg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ais_server_send_ota_msg &rArr; ais_server_notify &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
</UL>

<P><STRONG><a name="[106]"></a>ais_server_get_image_ver</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ais_server_get_image_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
</UL>

<P><STRONG><a name="[107]"></a>ais_server_handle_msg</STRONG> (Thumb, 1536 bytes, Stack size 344 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ais_server_handle_msg &rArr; ais_server_send_device_exception &rArr; ais_server_indicate &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_secret_key
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_product_id
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_contains_ali_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_get_image_ver
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_ota_msg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send_device_exception
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_write_cb
</UL>

<P><STRONG><a name="[34]"></a>ais_server_read_cb</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ais_server_read_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_server.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>ais_server_write_cb</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ais_server_write_cb &rArr; ais_server_handle_msg &rArr; ais_server_send_device_exception &rArr; ais_server_indicate &rArr; ais_server_send &rArr; AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_server.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>ais_server_cccd_update_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ais_server_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_server.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>ais_server_disconnect_cb</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ais_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[111]"></a>ais_server_add</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ais_server_add &rArr; ais_server_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[4f5]"></a>ais_ota_conse_pkt_num_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ais_server.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>dis_set_parameter</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dis_set_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_srv_cb
</UL>

<P><STRONG><a name="[37]"></a>dis_attr_read_cb</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dis_attr_read_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dis.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>dis_add_service</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dis_add_service
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
</UL>

<P><STRONG><a name="[11c]"></a>health_server_fault_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, health_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_count_internal
</UL>

<P><STRONG><a name="[4f6]"></a>health_server_set_tests</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, health_server.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>health_server_set_company_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, health_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[11d]"></a>health_server_fault_register</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, health_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_period_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
</UL>

<P><STRONG><a name="[4f7]"></a>health_server_fault_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, health_server.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>health_server_fault_clear_all</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, health_server.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>health_server_fault_is_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, health_server.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>health_server_reg</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = health_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[126]"></a>fw_info_stat</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = fw_info_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
</UL>

<P><STRONG><a name="[128]"></a>fw_update_stat</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = fw_update_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_apply
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_abort
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_start
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
</UL>

<P><STRONG><a name="[12a]"></a>fw_update_server_handle_fw_update_prepare</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = fw_update_server_handle_fw_update_prepare &rArr; fw_update_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
</UL>

<P><STRONG><a name="[12b]"></a>fw_update_server_handle_fw_update_start</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = fw_update_server_handle_fw_update_start &rArr; fw_update_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
</UL>

<P><STRONG><a name="[12c]"></a>fw_update_server_handle_fw_update_abort</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = fw_update_server_handle_fw_update_abort &rArr; fw_update_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
</UL>

<P><STRONG><a name="[12d]"></a>fw_update_server_handle_fw_update_apply</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = fw_update_server_handle_fw_update_apply &rArr; fw_update_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_stat
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_receive
</UL>

<P><STRONG><a name="[12e]"></a>fw_update_server_receive</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = fw_update_server_receive &rArr; fw_update_server_handle_fw_update_prepare &rArr; fw_update_stat &rArr; fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_apply
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_abort
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_start
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_prepare
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_stat
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_info_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>fw_update_server_reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fw_update_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_models_init
</UL>

<P><STRONG><a name="[167]"></a>fw_update_server_load</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fw_update_server_load
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_load
</UL>

<P><STRONG><a name="[169]"></a>fw_update_server_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, firmware_update_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_clear
</UL>

<P><STRONG><a name="[130]"></a>fw_update_server_ready</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fw_update_server_ready &rArr; fw_update_server_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
</UL>

<P><STRONG><a name="[131]"></a>obj_transfer_phase_stat</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = obj_transfer_phase_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[133]"></a>obj_transfer_stat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = obj_transfer_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[134]"></a>obj_block_transfer_stat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = obj_block_transfer_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_transfer_start
</UL>

<P><STRONG><a name="[135]"></a>obj_block_stat</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = obj_block_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_get
</UL>

<P><STRONG><a name="[136]"></a>obj_info_stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = obj_info_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[13b]"></a>obj_transfer_server_verify_checksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, object_transfer_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
</UL>

<P><STRONG><a name="[137]"></a>obj_transfer_server_handle_obj_block_transfer_start</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = obj_transfer_server_handle_obj_block_transfer_start &rArr; obj_block_transfer_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_transfer_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[138]"></a>obj_transfer_server_handle_obj_chunk_transfer</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = obj_transfer_server_handle_obj_chunk_transfer &rArr; plt_bit_pool_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_verify_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[13c]"></a>obj_transfer_server_handle_obj_block_get</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = obj_transfer_server_handle_obj_block_get &rArr; obj_block_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[13d]"></a>obj_transfer_server_receive</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = obj_transfer_server_receive &rArr; obj_transfer_server_handle_obj_block_get &rArr; obj_block_stat &rArr; obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_log2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_exp2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_transfer_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_info_stat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_stat
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_phase_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object_transfer_server.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>obj_transfer_server_reg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = obj_transfer_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_models_init
</UL>

<P><STRONG><a name="[141]"></a>obj_transfer_server_load</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obj_transfer_server_load
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_load
</UL>

<P><STRONG><a name="[142]"></a>obj_transfer_server_clear</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obj_transfer_server_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_clear
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
</UL>

<P><STRONG><a name="[163]"></a>obj_transfer_server_busy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object_transfer_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
</UL>

<P><STRONG><a name="[144]"></a>generic_on_off_publish</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = generic_on_off_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_check
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_state_change_publish
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_trans_step_change
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pub_evt
</UL>

<P><STRONG><a name="[14c]"></a>generic_on_off_server_reg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = generic_on_off_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_transition_time_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_init
</UL>

<P><STRONG><a name="[4fa]"></a>generic_transition_time_convert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, generic_transition_time.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>generic_transition_timer_start</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, generic_transition_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = generic_transition_timer_start &rArr; mesh_tick_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_is_running
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_time_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_process
</UL>

<P><STRONG><a name="[4fb]"></a>generic_transition_timer_stop</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, generic_transition_time.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>generic_transition_time_get</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, generic_transition_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = generic_transition_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_receive
</UL>

<P><STRONG><a name="[14d]"></a>generic_transition_time_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, generic_transition_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_reg
</UL>

<P><STRONG><a name="[153]"></a>delay_execution_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, delay_execution.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_execution_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> delay_execution.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>delay_execution_timer_start</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, delay_execution.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delay_execution_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_receive
</UL>

<P><STRONG><a name="[155]"></a>delay_execution_timer_stop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, delay_execution.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>

<P><STRONG><a name="[14e]"></a>delay_execution_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, delay_execution.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_execution_init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_delay_execution_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_reg
</UL>

<P><STRONG><a name="[157]"></a>ali_attr_get</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, ali_model.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>

<P><STRONG><a name="[158]"></a>ali_attr_conf</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, ali_model.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>

<P><STRONG><a name="[159]"></a>ali_attr_msg_raw</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, ali_model.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>

<P><STRONG><a name="[15a]"></a>ali_attr_msg</STRONG> (Thumb, 218 bytes, Stack size 104 bytes, ali_model.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ali_attr_msg &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
</UL>

<P><STRONG><a name="[15b]"></a>ali_transparent_msg</STRONG> (Thumb, 102 bytes, Stack size 80 bytes, ali_model.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>

<P><STRONG><a name="[15c]"></a>ali_model_reg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ali_model.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ali_model_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_info_get_by_model_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_init
</UL>

<P><STRONG><a name="[15e]"></a>dfu_updater_nvm_load</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_updater_nvm_load
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_load
</UL>

<P><STRONG><a name="[160]"></a>dfu_updater_nvm_clear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfu_updater_nvm_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_clear
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_load
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
</UL>

<P><STRONG><a name="[162]"></a>fw_update_server_data_cb</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fw_update_server_data_cb &rArr; unlock_flash_all &rArr; flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_busy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_updater_app.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>obj_transfer_server_data_cb</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = obj_transfer_server_data_cb &rArr; sil_dfu_update &rArr; check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_ready
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_updater_app.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>dfu_updater_load</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dfu_updater_load &rArr; mesh_flash_restore_node_state &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_load
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_load
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore_node_state
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[168]"></a>dfu_updater_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_updater_clear &rArr; obj_transfer_server_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_clear
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_nvm_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[16a]"></a>dfu_updater_models_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dfu_updater_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfu_updater_models_init &rArr; fw_update_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_reg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[16b]"></a>light_driver_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = light_driver_init &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[16c]"></a>light_lighten</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMChangeFreqAndDuty
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_rgb_turn_on
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_rgb_turn_off
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cw_turn_on
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cw_turn_off
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_rgb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_blue
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_green
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_red
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_cw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_warm
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten_cold
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_turn_off
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_timeout_handle
</UL>

<P><STRONG><a name="[171]"></a>light_set_lightness</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_hsl
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_ctl
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_turn_on
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_rgb_turn_on
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cw_turn_on
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_blue_lightness
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_green_lightness
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_warm_lightness
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cold_lightness
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_rgb_lightness
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_red_lightness
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cw_lightness
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_on
</UL>

<P><STRONG><a name="[172]"></a>light_set_all_turn_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_set_all_turn_on &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_restore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pwmControl_driver_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[173]"></a>light_pin_config</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = light_pin_config &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Config
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_StructInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_driver_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pwmControl_driver_init
</UL>

<P><STRONG><a name="[179]"></a>light_pwmControl_driver_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = light_pwmControl_driver_init &rArr; light_pin_config &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[17a]"></a>light_blink_infinite</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_warm
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_cold
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_red
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_green
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_blue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_ledPwm
</UL>

<P><STRONG><a name="[17b]"></a>light_blink_ledPwm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_blink_ledPwm &rArr; light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[17c]"></a>light_set_all_turn_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_set_all_turn_off &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[17d]"></a>light_pin_dlps_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dimmable_light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_enter_dlps
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_enter_dlps
</UL>

<P><STRONG><a name="[17e]"></a>light_set_enter_dlps</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dimmable_light.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_dlps_config
</UL>

<P><STRONG><a name="[17f]"></a>plug_light_enter_dlps_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plug_light_enter_dlps_config
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enter_dlps_config
</UL>

<P><STRONG><a name="[202]"></a>plug_light_exit_dlps_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dimmable_light.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exit_dlps_config
</UL>

<P><STRONG><a name="[180]"></a>light_flash_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_state_store
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_count_check
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_timeout_cb
</UL>

<P><STRONG><a name="[181]"></a>light_flash_read</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = light_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_restore
</UL>

<P><STRONG><a name="[182]"></a>light_power_on_count_check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = light_power_on_count_check &rArr; mesh_node_clear &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clear
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_restore
</UL>

<P><STRONG><a name="[186]"></a>mp_cmd_parse</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, mp_cmd_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_cmd_parse &rArr; mp_cmd_response &rArr; data_uart_send_string &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btxfcs
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[187]"></a>mp_cmd_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mp_cmd_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_cmd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[8f]"></a>load_overlay</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, overlay_mgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = load_overlay
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[188]"></a>get_current_scenario_index</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, overlay_mgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[189]"></a>light_prov_complete_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = light_prov_complete_cb &rArr; turn_on_light &rArr; light_set_cw_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_light
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_effect_app.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>light_prov_unprov</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, light_effect_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_turn_off
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_red
</UL>

<P><STRONG><a name="[18e]"></a>light_prov_link_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light_effect_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_light
</UL>

<P><STRONG><a name="[4fc]"></a>light_prov_link_closed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light_effect_app.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>light_prov_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light_effect_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_light
</UL>

<P><STRONG><a name="[190]"></a>light_prov_complete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, light_effect_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cold
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink
</UL>

<P><STRONG><a name="[193]"></a>light_gap_state_disconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_gap_state_disconnect &rArr; light_blink_red &rArr; light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_red
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[194]"></a>light_gap_state_connected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_gap_state_connected &rArr; light_set_red_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_red_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
</UL>

<P><STRONG><a name="[196]"></a>light_dfu_client_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = light_dfu_client_start &rArr; light_cwrgb_turn_off &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_turn_off
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_client_callback
</UL>

<P><STRONG><a name="[198]"></a>light_dfu_client_end</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_dfu_client_end &rArr; light_set_rgb_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_rgb_lightness
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cw_lightness
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_warm
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_red
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_green
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cold
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_client_callback
</UL>

<P><STRONG><a name="[19f]"></a>light_dfu_client_fail</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_dfu_client_fail &rArr; light_set_rgb_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_rgb_lightness
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cw_lightness
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_warm
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_red
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_green
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cold
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_client_callback
</UL>

<P><STRONG><a name="[1a0]"></a>light_dfu_server_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = light_dfu_server_start &rArr; light_cwrgb_turn_off &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_turn_off
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_green
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[1a2]"></a>light_dfu_server_end</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_dfu_server_end &rArr; light_set_rgb_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_rgb_lightness
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cw_lightness
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_warm
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_red
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_green
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cold
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[1a3]"></a>light_dfu_server_fail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_dfu_server_fail &rArr; light_blink_green &rArr; light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_green
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[1a4]"></a>light_state_store</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, light_storage_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_state_store &rArr; light_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_rgb_lightness
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cw_lightness
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_light
</UL>

<P><STRONG><a name="[4fd]"></a>light_user_data_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light_storage_app.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>light_flash_restore</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, light_storage_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = light_flash_restore &rArr; mesh_flash_restore_node_state &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_count_check
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_on
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore_node_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[1a8]"></a>hsl_2_rgb</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hue_2_rgb
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_hsl
</UL>

<P><STRONG><a name="[1af]"></a>rgb_2_hsl</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_hsl
</UL>

<P><STRONG><a name="[4fe]"></a>temperature_to_lightness</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>lightness_to_temperature</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_ctl
</UL>

<P><STRONG><a name="[1b2]"></a>board_plug_io_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = board_plug_io_init &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1b6]"></a>plug_on_off_pin_cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plug_on_off_pin_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPin
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_data
</UL>

<P><STRONG><a name="[1b8]"></a>plug_io_on_off_pin_enter_dlps_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plug_io_on_off_pin_enter_dlps_config
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enter_dlps_config
</UL>

<P><STRONG><a name="[1b9]"></a>plug_io_on_off_pin_exit_dlps_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plug_io_on_off_pin_exit_dlps_config
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exit_dlps_config
</UL>

<P><STRONG><a name="[1ba]"></a>light_cwrgb_driver_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
</UL>

<P><STRONG><a name="[1bb]"></a>light_cwrgb_enter_dlps</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_dlps_config
</UL>

<P><STRONG><a name="[1bc]"></a>light_set_cold_lightness</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1bd]"></a>light_lighten_cold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1be]"></a>light_set_warm_lightness</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1bf]"></a>light_lighten_warm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[19d]"></a>light_set_cw_lightness</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = light_set_cw_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cwrgb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_light
</UL>

<P><STRONG><a name="[1c0]"></a>light_lighten_cw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1a5]"></a>light_get_cw_lightness</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_state_store
</UL>

<P><STRONG><a name="[195]"></a>light_set_red_lightness</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_set_red_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_gap_state_connected
</UL>

<P><STRONG><a name="[1c1]"></a>light_lighten_red</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1c2]"></a>light_set_green_lightness</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1c3]"></a>light_lighten_green</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1c4]"></a>light_set_blue_lightness</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1c5]"></a>light_lighten_blue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[19e]"></a>light_set_rgb_lightness</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = light_set_rgb_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
</UL>

<P><STRONG><a name="[1c6]"></a>light_lighten_rgb</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1a6]"></a>light_get_rgb_lightness</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = light_get_rgb_lightness
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_state_store
</UL>

<P><STRONG><a name="[1c7]"></a>light_cw_turn_off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1c8]"></a>light_cw_turn_on</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1c9]"></a>light_rgb_turn_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[1ca]"></a>light_rgb_turn_on</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[18c]"></a>light_cwrgb_turn_off</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_cwrgb_turn_off &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_start
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_unprov
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_light
</UL>

<P><STRONG><a name="[1cb]"></a>light_cwrgb_turn_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1cc]"></a>light_blink_cold</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
</UL>

<P><STRONG><a name="[1cd]"></a>light_blink_warm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
</UL>

<P><STRONG><a name="[18d]"></a>light_blink_red</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_blink_red &rArr; light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_gap_state_disconnect
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_unprov
</UL>

<P><STRONG><a name="[1a1]"></a>light_blink_green</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_blink_green &rArr; light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_fail
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_start
</UL>

<P><STRONG><a name="[197]"></a>light_blink_blue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_blink_blue &rArr; light_blink_infinite &rArr; TIM_PWMChangeFreqAndDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_infinite
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_start
</UL>

<P><STRONG><a name="[1ce]"></a>light_set_ctl</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1cf]"></a>light_get_ctl</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightness_to_temperature
</UL>

<P><STRONG><a name="[1d1]"></a>light_set_hsl</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness
</UL>

<P><STRONG><a name="[1d2]"></a>light_get_hsl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
</UL>

<P><STRONG><a name="[191]"></a>light_get_cold</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_complete
</UL>

<P><STRONG><a name="[199]"></a>light_get_warm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
</UL>

<P><STRONG><a name="[19a]"></a>light_get_red</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
</UL>

<P><STRONG><a name="[19b]"></a>light_get_green</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
</UL>

<P><STRONG><a name="[19c]"></a>light_get_blue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
</UL>

<P><STRONG><a name="[1d3]"></a>light_set_cwrgb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cw_lightness
</UL>

<P><STRONG><a name="[1d4]"></a>light_get_cwrgb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[1d5]"></a>app_send_msg_to_apptask</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_send_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_scan_param_timeout_cb
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timeout_cb
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerReportCallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_Handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_tim_set
</UL>

<P><STRONG><a name="[1d6]"></a>app_send_uart_msg</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_send_uart_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_send_intern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[1d7]"></a>app_main_task</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = app_main_task &rArr; mesh_inner_msg_handle &rArr; bearer_loopback_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_handle_msg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_bt_stack
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_recv_intern
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_queue_create_intern
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swTimerInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_table_length
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text)
</UL>
<P><STRONG><a name="[1e3]"></a>app_task_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_task_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[1e5]"></a>mesh_stack_init</STRONG> (Thumb, 338 bytes, Stack size 96 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = mesh_stack_init &rArr; mesh_init &rArr; mesh_flash_restore &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_module_bitmap_trace_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_module_trace_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_random
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_product_id
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_contains_ali_data
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_reg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_set_company_id
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_restore
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_models_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_load
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_sub
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_params_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_srand
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_level_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_uuid_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compo_data_page0_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>app_le_gap_init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_le_gap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_register_app_cb
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_set_param
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>app_le_profile_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_le_profile_init &rArr; ais_server_add &rArr; ais_server_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_register_app_cb
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_register_general_client_cb
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_add
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_server_add
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_add
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>board_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = board_init &rArr; light_pwmControl_driver_init &rArr; light_pin_config &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_plug_io_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pwmControl_driver_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_driver_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ff]"></a>driver_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>app_enter_dlps_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_enter_dlps_config &rArr; plug_io_on_off_pin_enter_dlps_config
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_io_on_off_pin_enter_dlps_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_light_enter_dlps_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[201]"></a>app_exit_dlps_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_exit_dlps_config &rArr; plug_io_on_off_pin_exit_dlps_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_io_on_off_pin_exit_dlps_config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_light_exit_dlps_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>app_dlps_check_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_check_dlps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>pwr_mgr_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwr_mgr_init &rArr; DLPS_IORegister
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps_mode_set
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlps_check_cb_reg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IORegister
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dlps_ctrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>task_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_init
</UL>

<P><STRONG><a name="[81]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = main &rArr; mesh_stack_init &rArr; mesh_init &rArr; mesh_flash_restore &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_gap_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgr_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_profile_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_le_gap_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20c]"></a>dcd_prd_set</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dcd_prd_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
</UL>

<P><STRONG><a name="[20d]"></a>dcd_tim_set</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dcd_tim_set &rArr; is_in_list &rArr; timer_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
</UL>

<P><STRONG><a name="[20f]"></a>ali_server_receive</STRONG> (Thumb, 976 bytes, Stack size 104 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = ali_server_receive &rArr; ali_attr_msg &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unix2UTC
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_timer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_tim_set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_prd_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strip_app.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>strip_server_models_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strip_server_models_init &rArr; ali_model_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_model_reg
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[1f5]"></a>strip_server_models_sub</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strip_server_models_sub &rArr; mesh_model_sub &rArr; mesh_model_sub_check
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[215]"></a>GPIO20_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO20_Handler &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPin
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_MaskINTConfig
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearINTPendingBit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Group0_Handler
</UL>

<P><STRONG><a name="[218]"></a>handle_pub_evt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = handle_pub_evt &rArr; generic_on_off_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[219]"></a>send_update_request</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = send_update_request &rArr; ali_attr_msg &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerUpdateCallback
</UL>

<P><STRONG><a name="[21a]"></a>clear_timer</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = clear_timer &rArr; ali_attr_msg &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[241]"></a>get_prd_unix_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strip_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[240]"></a>get_prd_schedule</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strip_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[242]"></a>get_prd_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strip_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[23f]"></a>is_prd_exist</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strip_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[1db]"></a>mp_cmd_table_length</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mp_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[109]"></a>user_data_contains_ali_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_data_contains_ali_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[10b]"></a>user_data_read_ali_product_id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_data_read_ali_product_id
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[10a]"></a>user_data_read_ali_secret_key</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_data_read_ali_secret_key
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[21c]"></a>user_data_write_ali_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, user_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = user_data_write_ali_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_locked
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_update_ali_data
</UL>

<P><STRONG><a name="[220]"></a>vTimerUpdateCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = vTimerUpdateCallback &rArr; send_update_request &rArr; ali_attr_msg &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strip_timer.o(.text)
</UL>
<P><STRONG><a name="[221]"></a>vTimerReportCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTimerReportCallback &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strip_timer.o(.text)
</UL>
<P><STRONG><a name="[1dd]"></a>swTimerInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[22c]"></a>is_leap_year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, strip_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unix2UTC
</UL>

<P><STRONG><a name="[223]"></a>check_timer_valid</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_timer_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_write_buffer_locked
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unix2UTC
</UL>

<P><STRONG><a name="[1de]"></a>RTC_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompINTConfig
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_MaskINTConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetComp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unix2UTC
</UL>

<P><STRONG><a name="[210]"></a>unix2UTC</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = unix2UTC &rArr; check_timer_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RunCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_valid
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
</UL>

<P><STRONG><a name="[213]"></a>timer_list_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strip_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_init
</UL>

<P><STRONG><a name="[22d]"></a>timer_sort</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_write_buffer_locked
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_timer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_list
</UL>

<P><STRONG><a name="[20e]"></a>is_in_list</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = is_in_list &rArr; timer_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_write_buffer_locked
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_tim_set
</UL>

<P><STRONG><a name="[211]"></a>remove_timer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = remove_timer &rArr; timer_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_server_receive
</UL>

<P><STRONG><a name="[53]"></a>RTC_Handler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Handler &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetINTStatus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetComp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[23e]"></a>timer_data_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[230]"></a>app_handle_authen_state_evt</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_handle_authen_state_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[231]"></a>app_handle_conn_param_update_evt</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_handle_conn_param_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[232]"></a>app_handle_conn_mtu_info_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_handle_conn_mtu_info_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[233]"></a>app_handle_conn_state_evt</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_handle_conn_state_evt &rArr; dfu_client_disconnect_cb &rArr; gap_sched_scan &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_addr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_data_len
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_disconnect_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_connect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_connecting
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disconnect_cb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_disconnect_cb
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_gap_state_connected
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_gap_state_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[237]"></a>app_handle_dev_state_evt</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_handle_dev_state_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[238]"></a>app_handle_gap_msg</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = app_handle_gap_msg &rArr; gap_sched_handle_bt_status_msg &rArr; mesh_run &rArr; beacon_start &rArr; beacon_send &rArr; beacon_snb_send &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_passkey_display_confirm
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_get_display_key
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_oob_input_confirm
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_set_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_just_work_confirm
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_dev_state_evt
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_state_evt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_mtu_info_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_conn_param_update_evt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_authen_state_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[1e1]"></a>app_handle_io_msg</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = app_handle_io_msg &rArr; clear_timer &rArr; ali_attr_msg &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_adv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_adv_send
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_on_off_pin_cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_parse
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_on
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_data_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sort
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_prd_exist
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prd_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prd_schedule
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prd_unix_time
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pub_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[13]"></a>app_gap_callback</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = app_gap_callback &rArr; gap_sched_handle_adv_report &rArr; bearer_adv_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_adv_report
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv_params_set_done
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>app_client_callback</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_client_callback &rArr; light_dfu_client_fail &rArr; light_set_rgb_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_fail
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_end
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_client_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>app_profile_callback</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_profile_callback &rArr; light_dfu_server_end &rArr; light_set_rgb_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_fail
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_dfu_server_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_srv_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>prov_cb</STRONG> (Thumb, 430 bytes, Stack size 272 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = prov_cb &rArr; prov_auth_value_set &rArr; prov_send &rArr; pb_adv_send &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_secret_key
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_read_ali_product_id
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_contains_ali_data
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_off
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_ledPwm
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_on
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_clear
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_value_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_sub
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_params_set
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>fn_cb</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fn_cb &rArr; data_uart_debug &rArr; data_uart_vsprintf &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>unlock_flash_all</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unlock_flash_all &rArr; flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[c1]"></a>lock_flash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lock_flash &rArr; flash_set_block_protect_locked &rArr; flash_lock_new
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[24c]"></a>flash_erase_sector</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_flash_erase
</UL>

<P><STRONG><a name="[bd]"></a>sil_dfu_flash_erase</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sil_dfu_flash_erase &rArr; flash_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
</UL>

<P><STRONG><a name="[24e]"></a>get_temp_ota_bank_size_by_img_id</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ota_support_bank_switch
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_header_valid
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_size
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_bank_addr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_ota_bank_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
</UL>

<P><STRONG><a name="[254]"></a>check_dfu_update_image_length</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sil_dfu_update
</UL>

<P><STRONG><a name="[bc]"></a>sil_dfu_update</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, silent_dfu_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sil_dfu_update &rArr; check_dfu_update_image_length &rArr; get_temp_ota_bank_size_by_img_id
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_ota_bank_addr_by_img_id
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_read_locked
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_write_locked
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dfu_update_image_length
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_buffer_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_data_cb
</UL>

<P><STRONG><a name="[257]"></a>silent_dfu_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, silent_dfu_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_check_checksum
</UL>

<P><STRONG><a name="[258]"></a>silent_dfu_check_checksum</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, silent_dfu_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_image_chksum
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_locked
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_locked
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silent_dfu_reset
</UL>

<P><STRONG><a name="[25a]"></a>dfu_flash_check_appdefine_blank</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, silent_dfu_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_auto_read_locked
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[500]"></a>light_stop</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, light_controller_app.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>light_set_lightness_linear</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, light_controller_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_timer_start
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_action
</UL>

<P><STRONG><a name="[192]"></a>light_blink</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, light_controller_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_timer_start
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_action
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_complete
</UL>

<P><STRONG><a name="[260]"></a>light_breath</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, light_controller_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_timer_start
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_action
</UL>

<P><STRONG><a name="[501]"></a>is_light_controller_busy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, light_controller_app.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>is_light_busy</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, light_controller_app.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>light_controller_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, light_controller_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>

<P><STRONG><a name="[262]"></a>light_controller_deinit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, light_controller_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = light_controller_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
</UL>

<P><STRONG><a name="[264]"></a>unprov_timer_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, light_swtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unprov_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_unprov_ctrl_dlps
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_init
</UL>

<P><STRONG><a name="[248]"></a>unprov_timer_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, light_swtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unprov_timer_init &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[266]"></a>unprov_timer_get_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, light_swtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_stop
</UL>

<P><STRONG><a name="[268]"></a>unprov_timer_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, light_swtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_unprov_ctrl_dlps
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_get_status
</UL>

<P><STRONG><a name="[269]"></a>change_scan_param_timer_start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, light_swtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_scan_param_timer_init
</UL>

<P><STRONG><a name="[26a]"></a>change_scan_param_timer_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, light_swtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_scan_param_timer_start
</UL>

<P><STRONG><a name="[243]"></a>light_handle_sw_timer_msg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, light_swtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = light_handle_sw_timer_msg &rArr; gap_sched_scan &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timer_stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_unprov_ctrl_dlps
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_deinit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_io_msg
</UL>

<P><STRONG><a name="[208]"></a>light_dlps_ctrl_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, light_dlps_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_mgr_init
</UL>

<P><STRONG><a name="[503]"></a>light_io_ctrl_dlps</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, light_dlps_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>light_unprov_ctrl_dlps</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, light_dlps_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_stop
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_start
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
</UL>

<P><STRONG><a name="[204]"></a>light_check_dlps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, light_dlps_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dlps_check_cb
</UL>

<P><STRONG><a name="[26d]"></a>gap_lib_handle_btif_msg</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gap_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_lib_handle_btif_msg &rArr; le_handle_vendor_cmd_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_handle_btif_msg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_handle_disconnect_rsp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_handle_disconnect_ind
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_vendor_evt_info
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_vendor_cmd_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_sw_reset_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_lib.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>gap_lib_init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gap_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_lib_init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_register_extend_cb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[275]"></a>gap_sw_reset_req</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_active_link_num
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_sw_reset_req
</UL>

<P><STRONG><a name="[26f]"></a>le_handle_sw_reset_rsp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gap_lib_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_handle_sw_reset_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_send_dev_state
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[279]"></a>le_check_privacy_bond</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_key
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[23a]"></a>le_bond_just_work_confirm</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gap_lib_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_bond_just_work_confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_just_work_req_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[27c]"></a>le_gen_rand_addr</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_le_gen_rand_addr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[27e]"></a>patch_le_link_disconnected</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gap_lib_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patch_le_link_disconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_send_conn_state_msg
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_link_find_by_link_id
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_link_release
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_send_dev_state
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_handle_disconnect_rsp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_handle_disconnect_ind
</UL>

<P><STRONG><a name="[272]"></a>patch_le_link_handle_disconnect_rsp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gap_lib_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patch_le_link_handle_disconnect_rsp &rArr; patch_le_link_disconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[273]"></a>patch_le_link_handle_disconnect_ind</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_lib_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = patch_le_link_handle_disconnect_ind &rArr; patch_le_link_disconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_le_disconn_cfm
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_le_link_disconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[283]"></a>le_bond_get_sec_level</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_key
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_find_key_entry
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_addr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[504]"></a>le_get_dev_bond_info_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_lib_patch.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>le_get_dev_bond_info</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imp_flash_load
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[287]"></a>le_key_entry_init</STRONG> (Thumb, 332 bytes, Stack size 168 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_le_cccd_length
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_le_remote_csrk
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_le_local_csrk
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_le_remote_irk
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_le_remote_ltk
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_le_local_ltk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load_le_remote_bd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_bdaddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_dev_bond_info
</UL>

<P><STRONG><a name="[28f]"></a>le_set_dev_bond_info</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, gap_lib_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imp_flash_save
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_priority_queue_add
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_find_entry_by_aes
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_low_priority_bond
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_allocate_key_entry
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_find_key_entry
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_bond_delete_by_idx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_key_entry_init
</UL>

<P><STRONG><a name="[296]"></a>plt_os_queue_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, platform_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plt_os_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_queue_create_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start
</UL>

<P><STRONG><a name="[297]"></a>plt_mutex_create</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>

<P><STRONG><a name="[b5]"></a>plt_timer_create</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, platform_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_timer_start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_timer_start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_start
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_count_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_scan_param_timer_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_timer_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_start
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_allocate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_start
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_allocate
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_start
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_req
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_open
</UL>

<P><STRONG><a name="[263]"></a>plt_timer_is_active</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, platform_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plt_timer_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_controller_timer_start
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_stop
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_start
</UL>

<P><STRONG><a name="[299]"></a>plt_timer_get_id</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, platform_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plt_timer_get_id
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_timeout_cb
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_timeout_cb
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_rx_timeout_cb
</UL>

<P><STRONG><a name="[505]"></a>plt_delay_us</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, platform_os.o(.text), UNUSED)

<P><STRONG><a name="[506]"></a>plt_time_diff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, platform_os.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>plt_swap1</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, platform_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plt_swap1
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecdh_secret_gen
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_validate
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
</UL>

<P><STRONG><a name="[ac]"></a>plt_swap2</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, platform_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plt_swap2
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_encrypt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_decrypt
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap
</UL>

<P><STRONG><a name="[29b]"></a>plt_swap</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, platform_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap2
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
</UL>

<P><STRONG><a name="[1e9]"></a>plt_srand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, platform_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[29d]"></a>plt_rand</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, platform_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_timeout_cb
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_confirmation
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ack
</UL>

<P><STRONG><a name="[139]"></a>plt_bit_pool_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_block_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind_dump
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_available_key
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dispatch
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_sar
</UL>

<P><STRONG><a name="[13a]"></a>plt_bit_pool_set</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, platform_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plt_bit_pool_set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_handle_obj_chunk_transfer
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind_one
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
</UL>

<P><STRONG><a name="[3eb]"></a>plt_bit_pool_count</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, platform_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plt_bit_pool_count
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
</UL>

<P><STRONG><a name="[13e]"></a>plt_log2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, platform_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[13f]"></a>plt_exp2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, platform_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_receive
</UL>

<P><STRONG><a name="[29e]"></a>plt_hex_to_bin</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, platform_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1e8]"></a>diag_level_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_diagnose.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[2aa]"></a>AES128_ECB_encrypt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[2ad]"></a>AES128_ECB_decrypt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[fe]"></a>AES128_CBC_encrypt_buffer</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_send
</UL>

<P><STRONG><a name="[108]"></a>AES128_CBC_decrypt_buffer</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AES128_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
</UL>

<P><STRONG><a name="[185]"></a>data_uart_send_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, data_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_uart_send_string &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_char
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_response
</UL>

<P><STRONG><a name="[52]"></a>UART0_Handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, data_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagState
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rtl8762c.o(VECTOR)
</UL>
<P><STRONG><a name="[1dc]"></a>data_uart_init</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, data_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = data_uart_init &rArr; RCC_PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad_Config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pinmux_Config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[2b6]"></a>data_uart_baudrate</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, data_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphClockCmd
</UL>

<P><STRONG><a name="[507]"></a>data_uart_debug_switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_uart.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>data_uart_debug</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, data_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = data_uart_debug &rArr; data_uart_vsprintf &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_adv_pkt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_msg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_push_image
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cb
</UL>

<P><STRONG><a name="[2b7]"></a>data_uart_dump</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, data_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_char
</UL>

<P><STRONG><a name="[b0]"></a>gap_sched_task_get</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_sched_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_adv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_adv_send
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hb
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_conf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_conf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_offer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_pong
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_add_rm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ack
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_close
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[2ba]"></a>gap_sched_task_available</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gap_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>

<P><STRONG><a name="[2bb]"></a>gap_sched_task_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_sched_task_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_query
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>

<P><STRONG><a name="[2bd]"></a>gap_sched_timer_cb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_scheduler.o(.text)
</UL>
<P><STRONG><a name="[2be]"></a>gap_sched_timer_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_sched_timer_start &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>

<P><STRONG><a name="[2bf]"></a>gap_sched_timer_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_sched_timer_stop &rArr; plt_timer_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_unlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_lock
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_quit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
</UL>

<P><STRONG><a name="[2c0]"></a>gap_sched_query</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_sched_query &rArr; gap_sched_task_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>

<P><STRONG><a name="[2c4]"></a>gap_sched_adv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_one_shot_adv
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_update_param
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_param
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>

<P><STRONG><a name="[2c8]"></a>gap_sched_run</STRONG> (Thumb, 580 bytes, Stack size 56 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_stop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_start
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_set_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_query
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_interwave_scan_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_scan
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_adv_done
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_timeout
</UL>

<P><STRONG><a name="[2ca]"></a>gap_sched_timer_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gap_sched_timer_timeout &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[c6]"></a>gap_sched_scan</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gap_sched_scan &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disconnect_cb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_disconnect_cb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
</UL>

<P><STRONG><a name="[2cb]"></a>gap_sched_try</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_stop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_insert
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_stop
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
</UL>

<P><STRONG><a name="[2cd]"></a>gap_sched_quit</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gap_sched_quit &rArr; gap_sched_timer_stop &rArr; plt_timer_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_stop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_cache_pkt
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[2ce]"></a>gap_sched_disc_cb_reg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_sched_disc_cb_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_add
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_add
</UL>

<P><STRONG><a name="[2cf]"></a>gap_sched_disc_cb_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gap_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_deinit
</UL>

<P><STRONG><a name="[239]"></a>gap_sched_handle_bt_status_msg</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gap_sched_handle_bt_status_msg &rArr; mesh_run &rArr; beacon_start &rArr; beacon_send &rArr; beacon_snb_send &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_gap_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_gap_msg
</UL>

<P><STRONG><a name="[244]"></a>gap_sched_handle_adv_report</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = gap_sched_handle_adv_report &rArr; bearer_adv_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_adv_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
</UL>

<P><STRONG><a name="[2d4]"></a>gap_sched_init_gap_params</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gap_sched_init_gap_params
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_set_param
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_cfg
</UL>

<P><STRONG><a name="[af]"></a>gap_sched_link_check</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gap_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_adv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_adv_send
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
</UL>

<P><STRONG><a name="[1ea]"></a>gap_sched_params_set</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_sched_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_set_param
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_set_gap_param
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
</UL>

<P><STRONG><a name="[c5]"></a>gap_sched_params_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gap_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_cp_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
</UL>

<P><STRONG><a name="[2d6]"></a>gap_sched_cfg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gap_sched_cfg &rArr; gap_sched_init_gap_params
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init_gap_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
</UL>

<P><STRONG><a name="[2d7]"></a>gap_sched_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gap_sched_init &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_modify_bt_le_fw_policy
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
</UL>

<P><STRONG><a name="[2d9]"></a>gap_sched_deinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[245]"></a>gap_sched_adv_params_set_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_scheduler.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_one_shot_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
</UL>

<P><STRONG><a name="[246]"></a>gap_sched_adv_done</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gap_sched_adv_done &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_one_shot_adv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_callback
</UL>

<P><STRONG><a name="[117]"></a>access_cfg</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, mesh_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = access_cfg &rArr; app_key_index_from_global
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_stat
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_transparent_msg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg_raw
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_conf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_get
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>

<P><STRONG><a name="[118]"></a>access_send</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, mesh_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_stat
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_transparent_msg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_msg_raw
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_conf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_attr_get
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>

<P><STRONG><a name="[2dd]"></a>access_dispatch</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, mesh_access.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = access_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_check_internal
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_group_addr_check_by_model
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
</UL>

<P><STRONG><a name="[508]"></a>access_set_dispatch_preprocess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_access.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>bearer_gatt_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesh_bearer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bearer_gatt_send &rArr; proxy_service_send &rArr; proxy_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
</UL>

<P><STRONG><a name="[2e2]"></a>bearer_send_mesh_msg</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, mesh_bearer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bearer_send_mesh_msg &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_get_lpn1
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_gatt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>

<P><STRONG><a name="[b2]"></a>bearer_send</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, mesh_bearer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_adv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_adv_send
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ack
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_close
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[2e5]"></a>bearer_loopback_receive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mesh_bearer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = bearer_loopback_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[2d3]"></a>bearer_adv_receive</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mesh_bearer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = bearer_adv_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_receive
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_adv_report
</UL>

<P><STRONG><a name="[509]"></a>bearer_adv_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mesh_bearer.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>bearer_adv_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mesh_bearer.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>bearer_other_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_bearer.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>bearer_other_receive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mesh_bearer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
</UL>

<P><STRONG><a name="[30f]"></a>bearer_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mesh_bearer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
</UL>

<P><STRONG><a name="[2eb]"></a>beacon_uri_hash_gen</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mesh_beacon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
</UL>

<P><STRONG><a name="[2ed]"></a>beacon_udb_send</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = beacon_udb_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>

<P><STRONG><a name="[2ef]"></a>beacon_auth_snb</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_gen
</UL>

<P><STRONG><a name="[2f1]"></a>beacon_snb_gen</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_key_refresh_flag
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_auth_snb
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send_via_proxy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
</UL>

<P><STRONG><a name="[2f4]"></a>beacon_snb_send</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = beacon_snb_send &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_valid_num
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>

<P><STRONG><a name="[2f6]"></a>beacon_snb_send_via_proxy</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = beacon_snb_send_via_proxy &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_gen
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_send
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_cccd_update_cb
</UL>

<P><STRONG><a name="[2f7]"></a>beacon_send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = beacon_send &rArr; beacon_snb_send &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
</UL>

<P><STRONG><a name="[2f8]"></a>beacon_start</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = beacon_start &rArr; beacon_send &rArr; beacon_snb_send &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_restore
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[26b]"></a>beacon_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beacon_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_restore
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_deinit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[2f9]"></a>beacon_handle_snb</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = beacon_handle_snb &rArr; iv_index_update_try &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh_check
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_primary_subnet_check
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_exist_by_key
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update_try
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_auth_snb
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_receive
</UL>

<P><STRONG><a name="[50c]"></a>beacon_filter_snb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mesh_beacon.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>beacon_filter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_receive
</UL>

<P><STRONG><a name="[2e8]"></a>beacon_receive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = beacon_receive &rArr; beacon_handle_snb &rArr; iv_index_update_try &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_filter
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_adv_receive
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_receive
</UL>

<P><STRONG><a name="[300]"></a>beacon_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mesh_beacon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[50d]"></a>beacon_cfg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mesh_beacon.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>mesh_inner_msg_send</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_send_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timeout_handle
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_cb
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_available
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_timeout_cb
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timeout_cb
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timeout_cb
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_timeout_cb
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_timeout_cb
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timeout_cb
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_reboot_timer_cb
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_timer_cb
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_timeout_cb
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_timeout_cb
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_send
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_cb
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_cb
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_rx_timeout_cb
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_timeout_cb
</UL>

<P><STRONG><a name="[1e2]"></a>mesh_inner_msg_handle</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = mesh_inner_msg_handle &rArr; bearer_loopback_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_recv_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_timer_timeout
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_handle_timeout
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_handle_tx_done
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_timeout
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_rr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_handle_pub_timeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_handle_timeout
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_handle_timeout
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_handle_timeout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_loopback_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1f2]"></a>mesh_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = mesh_init &rArr; mesh_flash_restore &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[314]"></a>mesh_deinit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mesh_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_deinit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_deinit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_deinit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_deinit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_deinit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_deinit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_deinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_deinit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_deinit
</UL>

<P><STRONG><a name="[1da]"></a>mesh_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_start &rArr; plt_os_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[2d0]"></a>mesh_run</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mesh_run &rArr; beacon_start &rArr; beacon_send &rArr; beacon_snb_send &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_run
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_handle_bt_status_msg
</UL>

<P><STRONG><a name="[322]"></a>mesh_reboot_timer_cb</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_reboot_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_common.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>mesh_reboot</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_reboot &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SystemReset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_server_handle_cp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_data_cb
</UL>

<P><STRONG><a name="[50e]"></a>device_info_cb_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_common.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>mesh_tick_timer_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_tick_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_transition_timer_start
</UL>

<P><STRONG><a name="[150]"></a>mesh_tick_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_tick_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_time_timeout_handle
</UL>

<P><STRONG><a name="[151]"></a>mesh_tick_timer_is_running</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mesh_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_transition_timer_start
</UL>

<P><STRONG><a name="[156]"></a>mesh_model_delay_execution_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_init
</UL>

<P><STRONG><a name="[323]"></a>mesh_version_check</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
</UL>

<P><STRONG><a name="[324]"></a>prov_ecc_key_gen</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prov_ecc_key_gen &rArr; plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_make_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_allocate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_disconnect
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_timeout
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_prov_cb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[326]"></a>prov_ecc_key_validate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = prov_ecc_key_validate &rArr; ecc_validate_key &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_public_key
</UL>

<P><STRONG><a name="[328]"></a>prov_ecdh_secret_gen</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = prov_ecdh_secret_gen &rArr; ecdh_shared_secret &rArr; ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdh_shared_secret
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_public_key
</UL>

<P><STRONG><a name="[32a]"></a>prov_conf_keys_gen</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = prov_conf_keys_gen &rArr; mesh_k1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k1
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_public_key
</UL>

<P><STRONG><a name="[32c]"></a>prov_conf_key_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_provision.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[32d]"></a>prov_confirmation_gen</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = prov_confirmation_gen &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_value_set
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_random
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_confirmation
</UL>

<P><STRONG><a name="[32e]"></a>prov_data_keys_gen</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = prov_data_keys_gen &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_random
</UL>

<P><STRONG><a name="[32f]"></a>prov_data_crypto</STRONG> (Thumb, 440 bytes, Stack size 104 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = prov_data_crypto &rArr; mesh_k1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k1
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_encrypt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
</UL>

<P><STRONG><a name="[332]"></a>prov_timeout_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prov_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_provision.o(.text)
</UL>
<P><STRONG><a name="[304]"></a>prov_handle_timeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prov_handle_timeout &rArr; prov_disconnect &rArr; pb_adv_link_close &rArr; link_close &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_disconnect
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[334]"></a>prov_timer_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mesh_provision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_disconnect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_prov_cb
</UL>

<P><STRONG><a name="[335]"></a>prov_handle_disconnect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prov_handle_disconnect &rArr; prov_ecc_key_gen &rArr; plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timer_stop
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_handle_disc
</UL>

<P><STRONG><a name="[336]"></a>prov_timer_restart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mesh_provision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>

<P><STRONG><a name="[337]"></a>prov_params_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mesh_provision.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1ec]"></a>prov_params_set</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prov_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[338]"></a>prov_allocate</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prov_allocate &rArr; prov_ecc_key_gen &rArr; plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_init
</UL>

<P><STRONG><a name="[31c]"></a>prov_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prov_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
</UL>

<P><STRONG><a name="[3a4]"></a>prov_cap_check</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, mesh_provision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_invite
</UL>

<P><STRONG><a name="[3af]"></a>prov_start_check</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, mesh_provision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_start_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_start
</UL>

<P><STRONG><a name="[3ad]"></a>prov_auth_value_type_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mesh_provision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_value_set
</UL>

<P><STRONG><a name="[302]"></a>mesh_service_adv_send</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mesh_service_adv_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_param
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_link_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_check
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_valid_num
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
</UL>

<P><STRONG><a name="[31e]"></a>mesh_service_adv_start</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mesh_service_adv_start &rArr; mesh_service_adv_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_restore
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[26c]"></a>mesh_service_adv_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_service_adv_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_handle_sw_timer_msg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_restore
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_deinit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[2e7]"></a>mesh_service_adv_receive</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_service_adv_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_adv_receive
</UL>

<P><STRONG><a name="[339]"></a>mesh_service_identity_adv_send</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mesh_service_identity_adv_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_link_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_hash_gen
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_rr
</UL>

<P><STRONG><a name="[33b]"></a>mesh_service_identity_adv_trigger</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mesh_service_identity_adv_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_rr
</UL>

<P><STRONG><a name="[303]"></a>mesh_service_identity_adv_rr</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mesh_service_identity_adv_rr &rArr; mesh_service_identity_adv_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_trigger
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[31f]"></a>mesh_service_identity_adv_start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_service_identity_adv_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_set
</UL>

<P><STRONG><a name="[311]"></a>mesh_service_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mesh_service_init &rArr; proxy_server_add &rArr; proxy_ctx_allocate &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_add
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_add
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
</UL>

<P><STRONG><a name="[316]"></a>mesh_service_deinit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mesh_service.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[50f]"></a>mesh_service_adv_cfg</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, mesh_service.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>device_uuid_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[510]"></a>mesh_addr_type_classify</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>fixed_group_addr_check_by_model</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dispatch
</UL>

<P><STRONG><a name="[406]"></a>fixed_group_addr_check_by_node</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[33e]"></a>vir_addr_get_index</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vir_addr_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_add
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
</UL>

<P><STRONG><a name="[511]"></a>vir_addr_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>vir_addr_available</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
</UL>

<P><STRONG><a name="[33f]"></a>vir_addr_add</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = vir_addr_add &rArr; vir_addr_gen &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_gen
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
</UL>

<P><STRONG><a name="[341]"></a>vir_addr_delete</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = vir_addr_delete &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
</UL>

<P><STRONG><a name="[343]"></a>dev_key_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_add
</UL>

<P><STRONG><a name="[344]"></a>dev_key_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[346]"></a>dev_key_get_available_idx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_add
</UL>

<P><STRONG><a name="[512]"></a>dev_key_find</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>dev_key_add</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_get_available_idx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_set
</UL>

<P><STRONG><a name="[513]"></a>dev_key_delete</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>key_state_to_tx_loop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_gen
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[3b2]"></a>key_state_to_new_loop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
</UL>

<P><STRONG><a name="[350]"></a>key_state_to_frnd_key_loop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_update
</UL>

<P><STRONG><a name="[2f3]"></a>key_state_to_key_refresh_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_iv_index_update
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_gen
</UL>

<P><STRONG><a name="[46e]"></a>key_state_to_key_refresh_phase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_key_refresh_phase_set
</UL>

<P><STRONG><a name="[465]"></a>net_key_index_to_global</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
</UL>

<P><STRONG><a name="[2f5]"></a>net_key_valid_num</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_key_valid_num
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
</UL>

<P><STRONG><a name="[438]"></a>net_key_index_from_global</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_key_index_from_global
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_key_refresh_phase_set
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_set
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_get
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_get
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_add
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
</UL>

<P><STRONG><a name="[347]"></a>net_key_update</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k3
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_key_gen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_key_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
</UL>

<P><STRONG><a name="[34c]"></a>net_key_refresh</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_key_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_refresh
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_refresh
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[2fc]"></a>net_key_refresh_check</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_key_refresh_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[393]"></a>net_key_available</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
</UL>

<P><STRONG><a name="[34d]"></a>net_key_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = net_key_add &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_add
</UL>

<P><STRONG><a name="[34e]"></a>net_key_delete</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_key_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_ctx_clear
</UL>

<P><STRONG><a name="[463]"></a>net_key_dump</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_key_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_get
</UL>

<P><STRONG><a name="[2fb]"></a>net_key_primary_subnet_check</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_key_primary_subnet_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
</UL>

<P><STRONG><a name="[432]"></a>net_key_is_frnd_key</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_msg
</UL>

<P><STRONG><a name="[34f]"></a>frnd_key_update</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = frnd_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_frnd_key_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_gen
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_gen
</UL>

<P><STRONG><a name="[3f3]"></a>frnd_key_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
</UL>

<P><STRONG><a name="[357]"></a>app_key_index_to_global</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind_dump
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_dump
</UL>

<P><STRONG><a name="[2db]"></a>app_key_index_from_global</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_key_index_from_global
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
</UL>

<P><STRONG><a name="[351]"></a>app_key_update</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = app_key_update &rArr; mesh_k4 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k4
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
</UL>

<P><STRONG><a name="[353]"></a>app_key_refresh</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_key_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[354]"></a>app_key_add</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = app_key_add &rArr; app_key_update &rArr; mesh_k4 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
</UL>

<P><STRONG><a name="[355]"></a>app_key_delete</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_key_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
</UL>

<P><STRONG><a name="[356]"></a>app_key_dump</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_key_dump
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_to_global
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_get
</UL>

<P><STRONG><a name="[2fe]"></a>mesh_key_refresh</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mesh_key_refresh &rArr; fn_frnd_key_refresh &rArr; net_key_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_refresh
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_refresh
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_refresh
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_key_refresh_phase_set
</UL>

<P><STRONG><a name="[1ee]"></a>mesh_element_create</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mesh_element_create &rArr; cfg_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[35c]"></a>mesh_element_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_start
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_info_get_by_model_id
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
</UL>

<P><STRONG><a name="[35b]"></a>mesh_element_get_by_addr</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_delete_all
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
</UL>

<P><STRONG><a name="[514]"></a>mesh_model_num</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>mesh_model_get</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get
</UL>

<P><STRONG><a name="[35e]"></a>mesh_model_get_by_model_id</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_model_get_by_model_id
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_info_get_by_model_id
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compo_data_page0_gen
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_delete_all
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
</UL>

<P><STRONG><a name="[515]"></a>mesh_model_get_by_num</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>mesh_model_info_get_by_model_id</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mesh_model_info_get_by_model_id &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_model_reg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_reg
</UL>

<P><STRONG><a name="[516]"></a>mesh_model_get_index</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>mesh_model_handle_pub_timeout</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mesh_model_handle_pub_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[35f]"></a>mesh_model_pub_timeout_cb</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_model_pub_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_node.o(.text)
</UL>
<P><STRONG><a name="[321]"></a>mesh_model_pub_start</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_model_pub_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
</UL>

<P><STRONG><a name="[11b]"></a>mesh_model_pub_period_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_register
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_publish
</UL>

<P><STRONG><a name="[145]"></a>mesh_model_pub_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_publish
</UL>

<P><STRONG><a name="[212]"></a>mesh_model_pub_params_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_init
</UL>

<P><STRONG><a name="[517]"></a>mesh_model_pub_params_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>mesh_model_sub_check</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_model_sub_check
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_sub_check
</UL>

<P><STRONG><a name="[2df]"></a>mesh_model_sub_check_internal</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dispatch
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
</UL>

<P><STRONG><a name="[45c]"></a>mesh_model_sub_vir_addr_available</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
</UL>

<P><STRONG><a name="[214]"></a>mesh_model_sub</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_model_sub &rArr; mesh_model_sub_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_server_models_sub
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_load
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_all
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
</UL>

<P><STRONG><a name="[361]"></a>mesh_model_unsub</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_model_unsub
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
</UL>

<P><STRONG><a name="[363]"></a>mesh_model_sub_all</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
</UL>

<P><STRONG><a name="[3b3]"></a>mesh_model_sub_dump</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mesh_model_sub_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
</UL>

<P><STRONG><a name="[364]"></a>mesh_model_sub_load</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_model_sub_load &rArr; mesh_model_sub &rArr; mesh_model_sub_check
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
</UL>

<P><STRONG><a name="[365]"></a>mesh_model_sub_clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mesh_model_sub_clear &rArr; vir_addr_delete &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_delete_all
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
</UL>

<P><STRONG><a name="[366]"></a>mesh_model_get_available_key</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
</UL>

<P><STRONG><a name="[367]"></a>mesh_model_bind_one</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_set
</UL>

<P><STRONG><a name="[368]"></a>mesh_model_bind_all</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f4]"></a>mesh_model_bind</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_model_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[369]"></a>mesh_model_bind_dump</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_model_bind_dump
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_to_global
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
</UL>

<P><STRONG><a name="[125]"></a>mesh_model_reg</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_reg
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_server_reg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_reg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_reg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_model_reg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_reg
</UL>

<P><STRONG><a name="[1f1]"></a>compo_data_page0_gen</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compo_data_page0_gen &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[518]"></a>mesh_seq_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>mesh_seq_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mesh_seq_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
</UL>

<P><STRONG><a name="[36b]"></a>iv_index_update</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_clear
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_clear
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_iv_index_update
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_clear
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send_via_proxy
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_transit_to_iv_update
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_handle_timeout
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update_try
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
</UL>

<P><STRONG><a name="[36f]"></a>mesh_seq_use</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hb
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_frnd_upd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_conf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_conf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_offer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_pong
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_add_rm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[519]"></a>iv_index_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>iv_index_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
</UL>

<P><STRONG><a name="[2fd]"></a>iv_index_update_try</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = iv_index_update_try &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_check
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[371]"></a>iv_index_transit_to_iv_update</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>

<P><STRONG><a name="[301]"></a>iv_index_handle_timeout</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = iv_index_handle_timeout &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_check
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_transit_to_normal
</UL>

<P><STRONG><a name="[372]"></a>iv_index_transit_to_normal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_handle_timeout
</UL>

<P><STRONG><a name="[51a]"></a>iv_index_test_mode_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>iv_index_timeout_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iv_index_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_node.o(.text)
</UL>
<P><STRONG><a name="[374]"></a>iv_index_timer_start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iv_index_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_restore
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
</UL>

<P><STRONG><a name="[375]"></a>iv_index_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iv_index_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
</UL>

<P><STRONG><a name="[51b]"></a>attn_timer_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mesh_node.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>attn_timer_get</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = attn_timer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_receive
</UL>

<P><STRONG><a name="[376]"></a>attn_timeout_cb</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attn_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_node.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>attn_timer_start</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attn_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_receive
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_invite
</UL>

<P><STRONG><a name="[377]"></a>attn_timer_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attn_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_handle_timeout
</UL>

<P><STRONG><a name="[305]"></a>attn_timer_handle_timeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attn_timer_handle_timeout &rArr; attn_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[378]"></a>mesh_node_sub_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_node_sub_check &rArr; mesh_model_sub_check
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_check
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[1ed]"></a>mesh_node_cfg</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mesh_node_cfg &rArr; gap_sched_cfg &rArr; gap_sched_init_gap_params
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_params_set
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_cfg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[312]"></a>mesh_node_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_node_init &rArr; iv_index_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
</UL>

<P><STRONG><a name="[183]"></a>mesh_node_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mesh_node_clear &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_power_on_count_check
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
</UL>

<P><STRONG><a name="[37d]"></a>mesh_node_clean</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mesh_node_clean &rArr; mesh_model_sub_clear &rArr; vir_addr_delete &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_stop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_delete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_reset
</UL>

<P><STRONG><a name="[37f]"></a>mesh_node_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mesh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mesh_node_reset &rArr; mesh_node_clean &rArr; mesh_model_sub_clear &rArr; vir_addr_delete &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[380]"></a>mesh_node_restore</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
</UL>

<P><STRONG><a name="[31d]"></a>mesh_node_deinit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mesh_node.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_stop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_delete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[2da]"></a>mesh_msg_cfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mesh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hb
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_conf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_conf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_offer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_pong
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_add_rm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
</UL>

<P><STRONG><a name="[381]"></a>frnd_offer</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = frnd_offer &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
</UL>

<P><STRONG><a name="[385]"></a>frnd_clear_conf</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = frnd_clear_conf &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear
</UL>

<P><STRONG><a name="[386]"></a>frnd_sub_list_conf</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = frnd_sub_list_conf &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[387]"></a>frnd_update</STRONG> (Thumb, 220 bytes, Stack size 88 bytes, friendship_fn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>

<P><STRONG><a name="[399]"></a>fn_get_lpn</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fn_get_lpn
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[2e3]"></a>fn_get_lpn1</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fn_get_lpn1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
</UL>

<P><STRONG><a name="[51c]"></a>fn_get_master_key</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, friendship_fn.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>fn_get_poll_to</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fn_get_poll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[392]"></a>fn_frnd_queue_reset</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fn_frnd_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
</UL>

<P><STRONG><a name="[388]"></a>fn_frnd_queue_delete</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fn_frnd_queue_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_frnd_upd
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_seg_ack
</UL>

<P><STRONG><a name="[389]"></a>fn_frnd_queue_add</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fn_frnd_queue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_frnd_upd
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_seg_ack
</UL>

<P><STRONG><a name="[38a]"></a>fn_frnd_queue_add_seg_ack</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fn_frnd_queue_add_seg_ack &rArr; fn_frnd_queue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
</UL>

<P><STRONG><a name="[38b]"></a>fn_frnd_queue_add_frnd_upd</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = fn_frnd_queue_add_frnd_upd &rArr;  mesh_seq_use (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_iv_index_update
</UL>

<P><STRONG><a name="[39b]"></a>fn_lpn_sub_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fn_lpn_sub_check
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache_check
</UL>

<P><STRONG><a name="[38c]"></a>fn_lpn_sub_add</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fn_lpn_sub_add
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[38d]"></a>fn_lpn_sub_remove</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fn_lpn_sub_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[38e]"></a>fn_lpn_sub_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fn_lpn_sub_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_deinit
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
</UL>

<P><STRONG><a name="[38f]"></a>fn_frnd_key_gen</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = fn_frnd_key_gen &rArr; frnd_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_update
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_upd
</UL>

<P><STRONG><a name="[390]"></a>fn_frnd_key_upd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = fn_frnd_key_upd &rArr; fn_frnd_key_gen &rArr; frnd_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
</UL>

<P><STRONG><a name="[358]"></a>fn_frnd_key_refresh</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fn_frnd_key_refresh &rArr; net_key_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
</UL>

<P><STRONG><a name="[391]"></a>fn_handle_frnd_req</STRONG> (Thumb, 816 bytes, Stack size 80 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = fn_handle_frnd_req &rArr; fn_frnd_key_gen &rArr; frnd_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_available
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_gen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[394]"></a>fn_ctx_clear</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fn_ctx_clear &rArr; net_key_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_clear
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_clear
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear
</UL>

<P><STRONG><a name="[395]"></a>fn_handle_frnd_clear</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = fn_handle_frnd_clear &rArr; frnd_clear_conf &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[396]"></a>fn_handle_frnd_clear_conf</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fn_handle_frnd_clear_conf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[36e]"></a>fn_handle_iv_index_update</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fn_handle_iv_index_update &rArr; fn_frnd_queue_add_frnd_upd &rArr;  mesh_seq_use (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_key_refresh_flag
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_frnd_upd
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>

<P><STRONG><a name="[398]"></a>fn_handle_msg</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = fn_handle_msg &rArr; fn_handle_frnd_poll &rArr; frnd_clear &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear_conf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_remove
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_add
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_get_lpn
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_control_handler
</UL>

<P><STRONG><a name="[308]"></a>fn_handle_timeout</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = fn_handle_timeout &rArr; frnd_clear &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_offer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[39a]"></a>fn_cache_check</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fn_cache_check &rArr; fn_lpn_sub_check
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_check
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[39c]"></a>fn_cache</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fn_cache &rArr; fn_frnd_queue_add_seg_ack &rArr; fn_frnd_queue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_check
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_seg_ack
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[39d]"></a>fn_clear</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fn_clear &rArr; fn_ctx_clear &rArr; net_key_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_ctx_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[1f3]"></a>fn_init</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fn_init &rArr; fn_frnd_queue_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_stack_init
</UL>

<P><STRONG><a name="[39e]"></a>fn_deinit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, friendship_fn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_lpn_sub_clear
</UL>

<P><STRONG><a name="[333]"></a>prov_disconnect</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prov_disconnect &rArr; pb_adv_link_close &rArr; link_close &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_close
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_timeout
</UL>

<P><STRONG><a name="[3a7]"></a>device_receive</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = device_receive &rArr; prov_handle_public_key &rArr; prov_ecdh_secret_gen &rArr; ecdh_shared_secret &rArr; ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_random
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_confirmation
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_public_key
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_start
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_invite
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_prov_cb
</UL>

<P><STRONG><a name="[3ac]"></a>device_prov_cb</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = device_prov_cb &rArr; device_receive &rArr; prov_handle_public_key &rArr; prov_ecdh_secret_gen &rArr; ecdh_shared_secret &rArr; ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timer_stop
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_gen
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_device.o(.text)
</UL>
<P><STRONG><a name="[249]"></a>prov_auth_value_set</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = prov_auth_value_set &rArr; prov_send &rArr; pb_adv_send &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_value_type_get
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[313]"></a>prov_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prov_init &rArr; prov_allocate &rArr; prov_ecc_key_gen &rArr; plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_allocate
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
</UL>

<P><STRONG><a name="[37c]"></a>mesh_flash_clear</STRONG> (Thumb, 1048 bytes, Stack size 184 bytes, mesh_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clear
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_reset
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>

<P><STRONG><a name="[342]"></a>mesh_flash_store</STRONG> (Thumb, 1138 bytes, Stack size 72 bytes, mesh_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_set
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_dump
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_new_loop
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publication_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_clear
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_clear
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_delete
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_check
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_add
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_delete_all
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_model_sync_by_app_key
</UL>

<P><STRONG><a name="[30e]"></a>mesh_flash_restore</STRONG> (Thumb, 1098 bytes, Stack size 152 bytes, mesh_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = mesh_flash_restore &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_load
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publication_set
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_restore
</UL>

<P><STRONG><a name="[166]"></a>mesh_flash_restore_node_state</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mesh_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mesh_flash_restore_node_state &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_updater_load
</UL>

<P><STRONG><a name="[3b5]"></a>gap_set_lps_bootup_active_time</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[51d]"></a>lps_get_wakeup_time</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, gap_vendor_cmd.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>le_handle_vendor_cmd_rsp</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gap_vendor_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = le_handle_vendor_cmd_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[3b7]"></a>gap_vendor_cmd_req</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[270]"></a>le_handle_vendor_evt_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = le_handle_vendor_evt_info
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_lib_handle_btif_msg
</UL>

<P><STRONG><a name="[2d8]"></a>le_vendor_modify_bt_le_fw_policy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gap_vendor_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = le_vendor_modify_bt_le_fw_policy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
</UL>

<P><STRONG><a name="[3b9]"></a>le_vendor_check_priority_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_set_priority
</UL>

<P><STRONG><a name="[3b8]"></a>le_vendor_set_priority</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_vendor_check_priority_level
</UL>

<P><STRONG><a name="[3ba]"></a>le_vendor_measure_master_clk_freq_mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gap_vendor_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btif_vendor_cmd_req
</UL>

<P><STRONG><a name="[2bc]"></a>plt_list_push</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, platform_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_create
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_reg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_clear
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_update
</UL>

<P><STRONG><a name="[2b9]"></a>plt_list_pop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, platform_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_query
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_deinit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_update
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_free
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
</UL>

<P><STRONG><a name="[2cc]"></a>plt_list_insert</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, platform_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_try
</UL>

<P><STRONG><a name="[362]"></a>plt_list_delete</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, platform_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_unsub
</UL>

<P><STRONG><a name="[3be]"></a>xor_128</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, aes_cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[3bd]"></a>leftshift_onebit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes_cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[3bb]"></a>generate_subkey</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, aes_cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_ecb_encrypt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftshift_onebit
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>

<P><STRONG><a name="[3bf]"></a>padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, aes_cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>

<P><STRONG><a name="[2f0]"></a>AES_CMAC</STRONG> (Thumb, 178 bytes, Stack size 128 bytes, aes_cmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_ecb_encrypt
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_gen
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k4
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k3
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k1
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_keys_gen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_conf_keys_gen
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_auth_snb
</UL>

<P><STRONG><a name="[330]"></a>ccm_auth_encrypt</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ccm_auth_encrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_crypto
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_encrypt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_encrypt
</UL>

<P><STRONG><a name="[331]"></a>ccm_auth_decrypt</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ccm_auth_decrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_crypto
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_decrypt
</UL>

<P><STRONG><a name="[327]"></a>ecc_validate_key</STRONG> (Thumb, 194 bytes, Stack size 208 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ecc_validate_key &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_is_zero_xy
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_bytes2native
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_add
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_validate
</UL>

<P><STRONG><a name="[329]"></a>ecdh_shared_secret</STRONG> (Thumb, 150 bytes, Stack size 184 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ecdh_shared_secret &rArr; ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_native2bytes
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_is_zero
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_bytes2native
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecdh_secret_gen
</UL>

<P><STRONG><a name="[39]"></a>prov_server_write_cb</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, provision_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prov_server_write_cb &rArr; proxy_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_check
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_server.o(.constdata)
</UL>
<P><STRONG><a name="[3df]"></a>prov_server_notify</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, provision_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_server_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_server.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>prov_server_cccd_update_cb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, provision_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_server_cccd_update_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_set_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_server.o(.constdata)
</UL>
<P><STRONG><a name="[33c]"></a>prov_server_add</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, provision_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prov_server_add &rArr; proxy_ctx_allocate &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_reg
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_init
</UL>

<P><STRONG><a name="[3a0]"></a>prov_service_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, provision_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prov_service_send &rArr; proxy_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>

<P><STRONG><a name="[1e]"></a>prov_service_receive</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, provision_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prov_service_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_server.o(.text)
</UL>
<P><STRONG><a name="[30a]"></a>prov_service_handle_tx_done</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, provision_service.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[3e1]"></a>prov_service_handle_disc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, provision_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prov_service_handle_disc &rArr; prov_handle_disconnect &rArr; prov_ecc_key_gen &rArr; plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_disconnect
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_set_link
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_handle_disconnect
</UL>

<P><STRONG><a name="[3b]"></a>proxy_server_write_cb</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, proxy_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = proxy_server_write_cb &rArr; proxy_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy_server.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>proxy_server_cccd_update_cb</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, proxy_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = proxy_server_cccd_update_cb &rArr; beacon_snb_send_via_proxy &rArr; beacon_snb_gen &rArr; beacon_auth_snb &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send_via_proxy
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_free
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_set_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy_server.o(.constdata)
</UL>
<P><STRONG><a name="[3e5]"></a>proxy_server_notify</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, proxy_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proxy_server_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_send_data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy_server.o(.text)
</UL>
<P><STRONG><a name="[33d]"></a>proxy_server_add</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, proxy_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = proxy_server_add &rArr; proxy_ctx_allocate &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_add_service
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_disc_cb_reg
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_init
</UL>

<P><STRONG><a name="[2e1]"></a>proxy_service_send</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, proxy_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = proxy_service_send &rArr; proxy_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_snb_send_via_proxy
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_gatt_send
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[20]"></a>proxy_service_receive</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, proxy_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = proxy_service_receive &rArr; net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_receive
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy_server.o(.text)
</UL>
<P><STRONG><a name="[3e6]"></a>proxy_service_handle_disc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, proxy_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proxy_service_handle_disc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_set_link
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_handle_disconnect
</UL>

<P><STRONG><a name="[370]"></a>trans_send_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mesh_transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_handle_timeout
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update_try
</UL>

<P><STRONG><a name="[3ea]"></a>trans_tx_timer_start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trans_tx_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_count
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_need_retransmit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
</UL>

<P><STRONG><a name="[3ec]"></a>trans_tx_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trans_tx_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
</UL>

<P><STRONG><a name="[3ed]"></a>trans_rx_timer_start</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trans_rx_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[3ee]"></a>trans_rx_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trans_rx_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[3ef]"></a>trans_rx_incomplete_timer_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trans_rx_incomplete_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[3f0]"></a>trans_rx_incomplete_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trans_rx_incomplete_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[409]"></a>trans_rx_ctx_find</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = trans_rx_ctx_find
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[3f1]"></a>trans_rx_ctx_find1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trans_rx_ctx_find1
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
</UL>

<P><STRONG><a name="[3f2]"></a>trans_seg_ack</STRONG> (Thumb, 242 bytes, Stack size 96 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = trans_seg_ack &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_check
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[3f5]"></a>trans_send_seg</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_transport.o(.text)
</UL>
<P><STRONG><a name="[3f6]"></a>trans_access_encrypt</STRONG> (Thumb, 568 bytes, Stack size 80 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = trans_access_encrypt &rArr; app_encrypt &rArr; ccm_auth_encrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_get
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nonce_gen
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
</UL>

<P><STRONG><a name="[3fa]"></a>trans_access_decrypt</STRONG> (Thumb, 894 bytes, Stack size 80 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = trans_access_decrypt &rArr; rpl_check &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dispatch
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_check
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nonce_gen
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[3fd]"></a>trans_tx_queue_pop</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = trans_tx_queue_pop &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
</UL>

<P><STRONG><a name="[3fe]"></a>trans_tx_queue_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mesh_transport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_deinit
</UL>

<P><STRONG><a name="[3ff]"></a>trans_need_retransmit</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = trans_need_retransmit &rArr; trans_tx_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
</UL>

<P><STRONG><a name="[400]"></a>trans_retransmit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = trans_retransmit &rArr; trans_tx_queue_pop &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_need_retransmit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_timeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[2dc]"></a>trans_send</STRONG> (Thumb, 632 bytes, Stack size 40 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_timer_start
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
</UL>

<P><STRONG><a name="[401]"></a>trans_control_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_handle_ping_pong_msg
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_msg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_handle_msg
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[405]"></a>trans_receive</STRONG> (Thumb, 1406 bytes, Stack size 72 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_swap1
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_sub_check
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_check
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_group_addr_check_by_node
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_check
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_cache_pkt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_receive_filter
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_control_handler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_ctx_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_stop
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_start
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_stop
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_start
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cache_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
</UL>

<P><STRONG><a name="[307]"></a>trans_handle_timeout</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = trans_handle_timeout &rArr; trans_retransmit &rArr; trans_tx_queue_pop &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_retransmit
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_ctx_find1
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_incomplete_timer_stop
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_rx_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[40a]"></a>trans_hb</STRONG> (Thumb, 120 bytes, Stack size 80 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
</UL>

<P><STRONG><a name="[310]"></a>trans_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trans_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
</UL>

<P><STRONG><a name="[31a]"></a>trans_deinit</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mesh_transport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[37b]"></a>nmc_init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mesh_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nmc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_init
</UL>

<P><STRONG><a name="[36c]"></a>nmc_clear</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mesh_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmc_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>

<P><STRONG><a name="[318]"></a>nmc_deinit</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mesh_network.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[40b]"></a>nmc_check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mesh_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmc_check
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
</UL>

<P><STRONG><a name="[40c]"></a>nmc_update</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mesh_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmc_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_push
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_list_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
</UL>

<P><STRONG><a name="[383]"></a>net_send</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, mesh_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = net_send &rArr; net_encrypt &rArr; ccm_auth_encrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_counter_gen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nonce_gen
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hb
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_conf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_conf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_offer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_pong
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_add_rm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
</UL>

<P><STRONG><a name="[413]"></a>net_relay_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mesh_network.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mesh_network.o(.text)
</UL>
<P><STRONG><a name="[2e6]"></a>net_receive</STRONG> (Thumb, 1224 bytes, Stack size 208 bytes, mesh_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = net_receive &rArr; trans_receive &rArr; trans_control_handler &rArr; lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_exist_by_key
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_get_lpn1
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_update
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_counter_gen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nonce_gen
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_encrypt
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_update
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_check
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_adv_receive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_other_receive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_loopback_receive
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_receive
</UL>

<P><STRONG><a name="[2ec]"></a>mesh_s1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_gen
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k4
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k3
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k2
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_key_gen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_key_gen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_uri_hash_gen
</UL>

<P><STRONG><a name="[32b]"></a>mesh_k1</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mesh_k1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_key_gen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_key_gen
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_crypto
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_conf_keys_gen
</UL>

<P><STRONG><a name="[348]"></a>mesh_k2</STRONG> (Thumb, 478 bytes, Stack size 120 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_update
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>

<P><STRONG><a name="[349]"></a>mesh_k3</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mesh_k3 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>

<P><STRONG><a name="[352]"></a>mesh_k4</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = mesh_k4 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
</UL>

<P><STRONG><a name="[340]"></a>vir_addr_gen</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = vir_addr_gen &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_add
</UL>

<P><STRONG><a name="[34a]"></a>identity_key_gen</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = identity_key_gen &rArr; mesh_k1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k1
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>

<P><STRONG><a name="[33a]"></a>identity_hash_gen</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = identity_hash_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_ecb_encrypt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_send
</UL>

<P><STRONG><a name="[34b]"></a>beacon_key_gen</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = beacon_key_gen &rArr; mesh_k1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_k1
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>

<P><STRONG><a name="[3f7]"></a>app_nonce_gen</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_nonce_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
</UL>

<P><STRONG><a name="[40d]"></a>net_nonce_gen</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_nonce_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>

<P><STRONG><a name="[414]"></a>proxy_nonce_gen</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proxy_nonce_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[3f9]"></a>app_encrypt</STRONG> (Thumb, 316 bytes, Stack size 80 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = app_encrypt &rArr; ccm_auth_encrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
</UL>

<P><STRONG><a name="[3fb]"></a>app_decrypt</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = app_decrypt &rArr; ccm_auth_decrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
</UL>

<P><STRONG><a name="[40e]"></a>net_encrypt</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_encrypt &rArr; ccm_auth_encrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[411]"></a>net_decrypt</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = net_decrypt &rArr; ccm_auth_decrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
</UL>

<P><STRONG><a name="[40f]"></a>privacy_counter_gen</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = privacy_counter_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[410]"></a>net_obfuscate</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, mesh_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_obfuscate
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_ecb_encrypt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_receive
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[37a]"></a>rpl_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mesh_rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rpl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
</UL>

<P><STRONG><a name="[319]"></a>rpl_deinit</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mesh_rpl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[3fc]"></a>rpl_check</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, mesh_rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rpl_check &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_decrypt
</UL>

<P><STRONG><a name="[36d]"></a>rpl_clear</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mesh_rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update
</UL>

<P><STRONG><a name="[37e]"></a>rpl_reset</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mesh_rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rpl_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clean
</UL>

<P><STRONG><a name="[41e]"></a>pb_adv_receive_filter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, provision_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
</UL>

<P><STRONG><a name="[41c]"></a>pb_adv_receive_sar</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pb_adv_receive_sar &rArr; msg_ack &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8EtsCheck
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
</UL>

<P><STRONG><a name="[2e9]"></a>pb_adv_receive</STRONG> (Thumb, 1416 bytes, Stack size 56 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pb_adv_receive &rArr; pb_adv_receive_sar &rArr; msg_ack &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8EtsCheck
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_sar
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_filter
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_clear
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ack
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_adv_receive
</UL>

<P><STRONG><a name="[306]"></a>pb_adv_handle_timeout</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pb_adv_handle_timeout &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_clear
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_close
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[41f]"></a>pb_adv_link_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, provision_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[3a2]"></a>pb_adv_link_close</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pb_adv_link_close &rArr; link_close &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_clear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_close
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_disconnect
</UL>

<P><STRONG><a name="[2ee]"></a>pb_adv_link_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, provision_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_disconnect
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_send
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_udb_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_write_cb
</UL>

<P><STRONG><a name="[3a1]"></a>pb_adv_send</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pb_adv_send &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>

<P><STRONG><a name="[3ae]"></a>pb_adv_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, provision_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_init
</UL>

<P><STRONG><a name="[315]"></a>pb_adv_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, provision_adv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[3e3]"></a>proxy_send</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = proxy_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_send
</UL>

<P><STRONG><a name="[3de]"></a>proxy_receive</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = proxy_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_get_conn_param
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_write_cb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_write_cb
</UL>

<P><STRONG><a name="[420]"></a>proxy_filter_add_addr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proxy_filter_add_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_update
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
</UL>

<P><STRONG><a name="[421]"></a>proxy_filter_remove_addr</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proxy_filter_remove_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_update
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
</UL>

<P><STRONG><a name="[412]"></a>proxy_filter_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proxy_filter_update &rArr; proxy_filter_remove_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_remove_addr
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_add_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
</UL>

<P><STRONG><a name="[3e4]"></a>proxy_filter_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proxy_filter_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_cccd_update_cb
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_free
</UL>

<P><STRONG><a name="[3e7]"></a>proxy_filter</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proxy_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_send
</UL>

<P><STRONG><a name="[422]"></a>proxy_cfg_send</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = proxy_cfg_send &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_tx_loop
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_send
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_counter_gen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_encrypt
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_nonce_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_filter_stat
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_add_remove_addr
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_set_filter_type
</UL>

<P><STRONG><a name="[423]"></a>proxy_cfg_set_filter_type</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, proxy_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[424]"></a>proxy_cfg_add_remove_addr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, proxy_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>

<P><STRONG><a name="[425]"></a>proxy_cfg_filter_stat</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = proxy_cfg_filter_stat &rArr; proxy_cfg_send &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_handle_msg
</UL>

<P><STRONG><a name="[3e9]"></a>proxy_cfg_handle_msg</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = proxy_cfg_handle_msg &rArr; proxy_cfg_filter_stat &rArr; proxy_cfg_send &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_free
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg_filter_stat
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_remove_addr
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_add_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_receive
</UL>

<P><STRONG><a name="[3e8]"></a>proxy_cfg_receive</STRONG> (Thumb, 514 bytes, Stack size 152 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = proxy_cfg_receive &rArr; net_decrypt &rArr; ccm_auth_decrypt &rArr; ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privacy_counter_gen
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_update
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmc_check
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_nonce_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_receive
</UL>

<P><STRONG><a name="[3e2]"></a>proxy_ctx_allocate</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = proxy_ctx_allocate &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_add
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_add
</UL>

<P><STRONG><a name="[51e]"></a>proxy_ctx_set_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, proxy_protocol.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>proxy_ctx_set_filter_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, proxy_protocol.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>proxy_ctx_set_link</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, proxy_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_handle_disc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_cccd_update_cb
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_handle_disc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_cccd_update_cb
</UL>

<P><STRONG><a name="[2e4]"></a>proxy_ctx_get_link</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, proxy_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_disconnect
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send_mesh_msg
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_receive
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_handle_disc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_server_handle_disconnect
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_handle_disc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_server_handle_disconnect
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[426]"></a>proxy_ctx_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, proxy_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_filter_free
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_deinit
</UL>

<P><STRONG><a name="[379]"></a>proxy_ctx_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proxy_ctx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_cfg
</UL>

<P><STRONG><a name="[317]"></a>proxy_ctx_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, proxy_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[30b]"></a>proxy_handle_timeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proxy_handle_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[427]"></a>frnd_poll_cb</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = frnd_poll_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friendship_lpn.o(.text)
</UL>
<P><STRONG><a name="[428]"></a>frnd_req</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_req
</UL>

<P><STRONG><a name="[42a]"></a>frnd_poll</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = frnd_poll &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_cache_pkt
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[42b]"></a>frnd_sub_list_add_rm</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>

<P><STRONG><a name="[42d]"></a>lpn_frnd_key_gen</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lpn_frnd_key_gen &rArr; frnd_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_key_update
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_upd
</UL>

<P><STRONG><a name="[42e]"></a>lpn_frnd_key_upd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lpn_frnd_key_upd &rArr; lpn_frnd_key_gen &rArr; frnd_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
</UL>

<P><STRONG><a name="[359]"></a>lpn_frnd_key_refresh</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lpn_frnd_key_refresh &rArr; net_key_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
</UL>

<P><STRONG><a name="[42f]"></a>lpn_handle_frnd_offer</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lpn_handle_frnd_offer
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_msg
</UL>

<P><STRONG><a name="[430]"></a>lpn_handle_frnd_upd</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_quit
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_refresh
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh_check
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_update_try
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_msg
</UL>

<P><STRONG><a name="[408]"></a>lpn_handle_cache_pkt</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lpn_handle_cache_pkt &rArr; frnd_poll &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_quit
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[404]"></a>lpn_handle_msg</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = lpn_handle_msg &rArr; lpn_handle_frnd_upd &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_is_frnd_key
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_offer
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_control_handler
</UL>

<P><STRONG><a name="[309]"></a>lpn_handle_timeout</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = lpn_handle_timeout &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_quit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_available
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_gen
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_ctx_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[520]"></a>lpn_filter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, friendship_lpn.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>lpn_req</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
</UL>

<P><STRONG><a name="[3f8]"></a>lpn_frnd_key_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lpn_frnd_key_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_exist_by_key
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_access_encrypt
</UL>

<P><STRONG><a name="[2fa]"></a>lpn_frnd_exist_by_key</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lpn_frnd_exist_by_key &rArr; lpn_frnd_key_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_handle_snb
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_receive
</UL>

<P><STRONG><a name="[439]"></a>lpn_frnd_exist</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, friendship_lpn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
</UL>

<P><STRONG><a name="[435]"></a>lpn_clear</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_ctx_clear
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
</UL>

<P><STRONG><a name="[436]"></a>lpn_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>

<P><STRONG><a name="[437]"></a>lpn_deinit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>

<P><STRONG><a name="[471]"></a>hb_log2_greater</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[472]"></a>hb_exp2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[474]"></a>hb_log2_less</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[521]"></a>hb_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>hb_msg_send</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_hb
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_handle_timeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_frnd_upd
</UL>

<P><STRONG><a name="[43a]"></a>hb_timer_cb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hb_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heartbeat.o(.text)
</UL>
<P><STRONG><a name="[43b]"></a>hb_timer_start</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hb_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_run
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[43c]"></a>hb_timer_stop</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_handle_timeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
</UL>

<P><STRONG><a name="[30c]"></a>hb_handle_timeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = hb_handle_timeout &rArr; hb_msg_send &rArr; trans_hb &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_handle
</UL>

<P><STRONG><a name="[407]"></a>hb_receive_filter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_handle_msg
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_receive
</UL>

<P><STRONG><a name="[402]"></a>hb_handle_msg</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hb_handle_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_receive_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_control_handler
</UL>

<P><STRONG><a name="[3b4]"></a>hb_publication_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[3b1]"></a>hb_publication_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
</UL>

<P><STRONG><a name="[43d]"></a>hb_subscription_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_subscription_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[473]"></a>hb_subscription_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[31b]"></a>hb_deinit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, heartbeat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_deinit
</UL>

<P><STRONG><a name="[320]"></a>hb_run</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hb_run &rArr; hb_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_run
</UL>

<P><STRONG><a name="[43f]"></a>cfg_compo_data_stat</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cfg_compo_data_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[440]"></a>cfg_beacon_stat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_beacon_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[441]"></a>cfg_default_ttl_stat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_default_ttl_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[442]"></a>cfg_proxy_stat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_proxy_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[443]"></a>cfg_relay_stat</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_relay_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[444]"></a>cfg_net_transmit_stat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_net_transmit_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[445]"></a>cfg_model_pub_stat</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_model_pub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
</UL>

<P><STRONG><a name="[446]"></a>cfg_model_sub_stat</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cfg_model_sub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_delete_all
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
</UL>

<P><STRONG><a name="[447]"></a>cfg_model_sub_list</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cfg_model_sub_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
</UL>

<P><STRONG><a name="[448]"></a>cfg_net_key_stat</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cfg_net_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_add
</UL>

<P><STRONG><a name="[449]"></a>cfg_net_key_list</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cfg_net_key_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_get
</UL>

<P><STRONG><a name="[44a]"></a>cfg_app_key_stat</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cfg_app_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
</UL>

<P><STRONG><a name="[44b]"></a>cfg_app_key_list</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = cfg_app_key_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_get
</UL>

<P><STRONG><a name="[44c]"></a>cfg_node_identity_stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cfg_node_identity_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_set
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_get
</UL>

<P><STRONG><a name="[44d]"></a>cfg_model_app_stat</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cfg_model_app_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
</UL>

<P><STRONG><a name="[44e]"></a>cfg_model_app_list</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cfg_model_app_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
</UL>

<P><STRONG><a name="[44f]"></a>cfg_node_reset_stat</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_node_reset_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[450]"></a>cfg_frnd_stat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cfg_frnd_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[451]"></a>cfg_lpn_poll_timeout_stat</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cfg_lpn_poll_timeout_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[452]"></a>cfg_key_refresh_phase_stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cfg_key_refresh_phase_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_key_refresh_phase_set
</UL>

<P><STRONG><a name="[453]"></a>cfg_hb_pub_stat</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = cfg_hb_pub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[454]"></a>cfg_hb_sub_stat</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = cfg_hb_sub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[456]"></a>cfg_server_handle_module_pub_set</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = cfg_server_handle_module_pub_set &rArr; cfg_model_pub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_delete
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_pub_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[457]"></a>cfg_server_handle_model_pub_va_set</STRONG> (Thumb, 400 bytes, Stack size 64 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cfg_server_handle_model_pub_va_set &rArr; cfg_model_pub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_delete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_add
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_available
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_get_index
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_start
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_pub_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[459]"></a>cfg_server_handle_model_sub_add</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cfg_server_handle_model_sub_add &rArr; cfg_model_sub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_unsub
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[45a]"></a>cfg_server_handle_model_sub_delete_all</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cfg_server_handle_model_sub_delete_all &rArr; cfg_model_sub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[45b]"></a>cfg_server_handle_model_sub_va_add</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = cfg_server_handle_model_sub_va_add &rArr; cfg_model_sub_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_clear
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_unsub
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_vir_addr_available
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_delete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_add
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_available
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_addr_get_index
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_check_internal
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[45d]"></a>cfg_server_handle_model_sub_get</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cfg_server_handle_model_sub_get &rArr; cfg_model_sub_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_sub_dump
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_list
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[45e]"></a>cfg_server_handle_net_key_add</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_net_key_add &rArr; cfg_net_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[460]"></a>cfg_server_handle_net_key_update</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_net_key_update &rArr; cfg_net_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_key_upd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_stat
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_frnd_key_upd
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[461]"></a>cfg_server_handle_net_key_delete</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = cfg_server_handle_net_key_delete &rArr; cfg_net_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_valid_num
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publication_get
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_stat
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_model_sync_by_app_key
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[462]"></a>cfg_server_handle_net_key_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_net_key_get &rArr; cfg_net_key_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_dump
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_list
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[464]"></a>cfg_server_handle_app_key_add</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cfg_server_handle_app_key_add &rArr; cfg_app_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_to_global
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[466]"></a>cfg_server_handle_app_key_update</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cfg_server_handle_app_key_update &rArr; cfg_app_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_to_global
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[467]"></a>cfg_server_handle_app_key_delete</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_app_key_delete &rArr; cfg_app_key_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_delete
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_to_global
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_stat
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_model_sync_by_app_key
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[468]"></a>cfg_server_handle_app_key_get</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = cfg_server_handle_app_key_get &rArr; cfg_app_key_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_dump
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_list
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[469]"></a>cfg_server_handle_node_identity_get</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_node_identity_get &rArr; cfg_node_identity_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_node_identity_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[46a]"></a>cfg_server_handle_node_identity_set</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_node_identity_set &rArr; cfg_node_identity_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_start
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_node_identity_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[46b]"></a>cfg_server_handle_model_app_bind</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = cfg_server_handle_model_app_bind &rArr; cfg_model_app_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_bit_pool_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_index_from_global
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_app_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[46c]"></a>cfg_server_handle_model_app_get</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = cfg_server_handle_model_app_get &rArr; cfg_model_app_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_bind_dump
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_app_list
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[46d]"></a>cfg_server_handle_key_refresh_phase_set</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = cfg_server_handle_key_refresh_phase_set &rArr; cfg_key_refresh_phase_stat &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_key_refresh_phase
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_key_refresh
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_key_refresh_phase_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_receive
</UL>

<P><STRONG><a name="[46f]"></a>cfg_server_receive</STRONG> (Thumb, 2186 bytes, Stack size 64 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = cfg_server_receive &rArr; cfg_server_handle_model_sub_get &rArr; cfg_model_sub_list &rArr; cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_disconnect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_reset
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_get_by_model_id
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_get_by_addr
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_index_from_global
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_key_refresh_phase
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publication_set
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publication_get
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_clear
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_get_poll_to
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_key_refresh_phase_set
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_get
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_app_bind
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_set
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_node_identity_get
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_get
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_update
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_update
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_add
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_get
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_va_add
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_delete_all
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_sub_add
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_model_pub_va_set
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_module_pub_set
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_hb_sub_stat
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_hb_pub_stat
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_key_refresh_phase_stat
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_lpn_poll_timeout_stat
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_frnd_stat
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_node_reset_stat
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_pub_stat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_transmit_stat
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_relay_stat
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_proxy_stat
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_default_ttl_stat
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_beacon_stat
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_compo_data_stat
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_subscription_get
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_subscription_set
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_stop
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_timer_start
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_log2_less
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_exp2
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_log2_greater
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configuration_server.o(.text)
</UL>
<P><STRONG><a name="[35a]"></a>cfg_server_reg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cfg_server_reg &rArr; mesh_model_reg &rArr; mesh_model_get_by_model_id
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_reg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_info_get_by_model_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_element_create
</UL>

<P><STRONG><a name="[522]"></a>cfg_server_resp_with_seg_msg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, configuration_server.o(.text), UNUSED)

<P><STRONG><a name="[523]"></a>cfg_server_set_net_trans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, configuration_server.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>crc8EtsGen</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc8ets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc8EtsGen
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>

<P><STRONG><a name="[41d]"></a>crc8EtsCheck</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, crc8ets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc8EtsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_sar
</UL>

<P><STRONG><a name="[475]"></a>trans_ping</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, transport_ping.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>

<P><STRONG><a name="[477]"></a>trans_pong</STRONG> (Thumb, 120 bytes, Stack size 80 bytes, transport_ping.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>

<P><STRONG><a name="[403]"></a>trans_handle_ping_pong_msg</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, transport_ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trans_handle_ping_pong_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_control_handler
</UL>

<P><STRONG><a name="[524]"></a>trans_ping_pong_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, transport_ping.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_test_bit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_lshift
</UL>

<P><STRONG><a name="[525]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_lshift
</UL>

<P><STRONG><a name="[526]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ais_server_handle_msg
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cb
</UL>

<P><STRONG><a name="[47d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[47e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[77]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[527]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[89]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_seed_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[7b]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[45f]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_add
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_add
</UL>

<P><STRONG><a name="[479]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[478]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[21b]"></a>UpdateMAC</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, rtl876x_lib_platform.o(i.UpdateMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UpdateMAC &rArr; cfg_add_item &rArr; _cfg_write_to_flash &rArr; flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_update_ali_data
</UL>

<P><STRONG><a name="[1ad]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
</UL>

<P><STRONG><a name="[47b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[47f]"></a>cfg_add_item</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, rtl876x_lib_cfg_int.o(i.cfg_add_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cfg_add_item &rArr; _cfg_write_to_flash &rArr; flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc_intern
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_find_item
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_check_header_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAC
</UL>

<P><STRONG><a name="[484]"></a>cfg_find_item</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, rtl876x_lib_cfg_int.o(i.cfg_find_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cfg_find_item &rArr; _cfg_check_header_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_check_header_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
</UL>

<P><STRONG><a name="[485]"></a>flash_lock_new</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtl8762c_lib_flash.o(i.flash_lock_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_lock_new
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_locked
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect_locked
</UL>

<P><STRONG><a name="[24b]"></a>flash_set_block_protect_locked</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtl8762c_lib_flash.o(i.flash_set_block_protect_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_set_block_protect_locked &rArr; flash_lock_new
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock_new
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock_new
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
</UL>

<P><STRONG><a name="[24a]"></a>flash_sw_protect_unlock_by_addr_locked</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtl8762c_lib_flash.o(i.flash_sw_protect_unlock_by_addr_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock_new
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock_new
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_flash_all
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cfg_write_to_flash
</UL>

<P><STRONG><a name="[489]"></a>flash_sw_protect_unlock_by_addr_new</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, rtl8762c_lib_flash.o(i.flash_sw_protect_unlock_by_addr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_flash_exist
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_block_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_locked
</UL>

<P><STRONG><a name="[488]"></a>flash_unlock_new</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtl8762c_lib_flash.o(i.flash_unlock_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_unlock_new
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_locked
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect_locked
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
</UL>

<P><STRONG><a name="[48d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[490]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[496]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cwrgb
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
</UL>

<P><STRONG><a name="[493]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cwrgb
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[494]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
</UL>

<P><STRONG><a name="[528]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cwrgb
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[529]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[52a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[495]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[499]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_get_cwrgb
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_2_hsl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pin_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
</UL>

<P><STRONG><a name="[497]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[48f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[492]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[480]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[498]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[481]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[49a]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
</UL>

<P><STRONG><a name="[49c]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
</UL>

<P><STRONG><a name="[49d]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[49e]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[79]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[52b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[52c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[48e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[93]"></a>AppUpdateVectorTable</STRONG> (Thumb, 182 bytes, Stack size 280 bytes, system_rtl8762c.o(.app.overlay_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AppUpdateVectorTable
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamVectorTableInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[90]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_rtl8762c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[4bf]"></a>GPIO_DLPS_Exit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtl876x_io_dlps.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_DLPS_Exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
</UL>

<P><STRONG><a name="[4bd]"></a>UART_DLPS_Enter</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, rtl876x_io_dlps.o(.ram.dataon.data))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_EnterDlpsCb
</UL>

<P><STRONG><a name="[4be]"></a>UART_DLPS_Exit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, rtl876x_io_dlps.o(.ram.dataon.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DLPS_Exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPS_IO_ExitDlpsCb
</UL>

<P><STRONG><a name="[6]"></a>dfu_server_timeout_cb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfu_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_server_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_send_intern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_server.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>dfu_client_disc_state_cb</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfu_client_disc_state_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_all_char_descriptor_discovery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_all_char_discovery
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_switch_next_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_client.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>dfu_client_disc_result_cb</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_client_disc_result_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_handle_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_client.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>dfu_client_read_result_cb</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfu_client_read_result_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_client.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>dfu_client_write_result_cb</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_client_write_result_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_client.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>dfu_client_notify_indicate_cb</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfu_client_notify_indicate_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_client.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>dfu_client_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dfu_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_client_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_header_addr_by_img_id
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_add
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disconnect_cb
</UL>

<P><STRONG><a name="[e3]"></a>dfu_client_switch_next_descriptor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dfu_client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_client_disc_state_cb
</UL>

<P><STRONG><a name="[7]"></a>ais_server_timeout_cb</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ais_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ais_server_timeout_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_send_intern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_server.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>health_server_fill_fault</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = health_server_fill_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_stat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
</UL>

<P><STRONG><a name="[115]"></a>health_server_fault_count_internal</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = health_server_fault_count_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_count
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_stat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
</UL>

<P><STRONG><a name="[114]"></a>health_curt_stat</STRONG> (Thumb, 106 bytes, Stack size 88 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = health_curt_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_count_internal
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fill_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_register
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_publish
</UL>

<P><STRONG><a name="[119]"></a>health_fault_stat</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = health_fault_stat &rArr; health_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fault_count_internal
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_fill_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_receive
</UL>

<P><STRONG><a name="[9]"></a>health_server_publish</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = health_server_publish &rArr; health_curt_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_pub_period_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_curt_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_server.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>health_server_receive</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = health_server_receive &rArr; health_fault_stat &rArr; health_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_start
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_attn_stat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_stat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_server.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>health_server_send</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = health_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_attn_stat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_stat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_stat
</UL>

<P><STRONG><a name="[122]"></a>health_period_stat</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = health_period_stat &rArr; health_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_receive
</UL>

<P><STRONG><a name="[121]"></a>health_attn_stat</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, health_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = health_attn_stat &rArr; health_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_receive
</UL>

<P><STRONG><a name="[129]"></a>fw_update_server_apply</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fw_update_server_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_ready
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_server_handle_fw_update_apply
</UL>

<P><STRONG><a name="[127]"></a>fw_update_server_send</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, firmware_update_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = fw_update_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_update_stat
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_info_stat
</UL>

<P><STRONG><a name="[132]"></a>obj_transfer_server_send</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, object_transfer_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = obj_transfer_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_info_stat
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_stat
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_block_transfer_stat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_stat
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_transfer_phase_stat
</UL>

<P><STRONG><a name="[143]"></a>generic_on_off_stat</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_publish
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_publish
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_receive
</UL>

<P><STRONG><a name="[a]"></a>generic_on_off_trans_step_change</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = generic_on_off_trans_step_change &rArr; generic_on_off_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_publish
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_present_on_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_on_off_server.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>generic_on_off_process</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = generic_on_off_process &rArr; generic_transition_timer_start &rArr; mesh_tick_timer_start &rArr; plt_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_transition_timer_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_present_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_receive
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_delay_execution
</UL>

<P><STRONG><a name="[b]"></a>generic_on_off_delay_execution</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = generic_on_off_delay_execution &rArr; generic_on_off_state_change_publish &rArr; generic_on_off_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_state_change_publish
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_on_off_server.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>generic_on_off_server_receive</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = generic_on_off_server_receive &rArr; generic_on_off_state_change_publish &rArr; generic_on_off_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_transition_time_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_execution_timer_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_present_on_off
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_state_change_publish
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_process
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_on_off_server.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>generic_on_off_server_publish</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = generic_on_off_server_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_present_on_off
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_on_off_server.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>generic_on_off_state_change_publish</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = generic_on_off_state_change_publish &rArr; generic_on_off_publish &rArr; generic_on_off_stat &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_receive
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_delay_execution
</UL>

<P><STRONG><a name="[146]"></a>get_present_on_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, generic_on_off_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_present_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_publish
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_server_receive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_on_off_trans_step_change
</UL>

<P><STRONG><a name="[14f]"></a>trans_time_insert</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, generic_transition_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trans_time_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc_intern
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_transition_timer_start
</UL>

<P><STRONG><a name="[e]"></a>trans_time_timeout_handle</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, generic_transition_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trans_time_timeout_handle &rArr; mesh_tick_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_tick_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_transition_time.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>delay_execution_timeout_handle</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, delay_execution.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_execution_timeout_handle &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> delay_execution.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>light_power_on_timeout_cb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dimmable_light.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = light_power_on_timeout_cb &rArr; light_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dimmable_light.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>mp_cmd_response</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, mp_cmd_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mp_cmd_response &rArr; data_uart_send_string &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btxfcs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmd_parse
</UL>

<P><STRONG><a name="[18a]"></a>turn_on_light</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, light_effect_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = turn_on_light &rArr; light_set_cw_lightness &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_state_store
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_cw_lightness
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_cwrgb_turn_off
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_start
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_link_open
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_prov_complete_cb
</UL>

<P><STRONG><a name="[1ac]"></a>hue_2_rgb</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsl_2_rgb
</UL>

<P><STRONG><a name="[1b7]"></a>GPIO_WriteBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, light_cwrgb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_on_off_pin_cmd
</UL>

<P><STRONG><a name="[16]"></a>generic_on_off_server_data</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, strip_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = generic_on_off_server_data &rArr; light_set_all_turn_off &rArr; light_set_lightness &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_on_off_pin_cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_all_turn_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strip_app.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>mp_cmd_update_ali_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mp_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mp_cmd_update_ali_data &rArr; UpdateMAC &rArr; cfg_add_item &rArr; _cfg_write_to_flash &rArr; flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_data_write_ali_data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mp_cmd.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>RTC_ResetCounter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, strip_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ResetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unix2UTC
</UL>

<P><STRONG><a name="[247]"></a>app_dis_srv_cb</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, main_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_dis_srv_cb &rArr; dis_set_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_set_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_profile_callback
</UL>

<P><STRONG><a name="[25e]"></a>request_action</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, light_controller_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_breath
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness_linear
</UL>

<P><STRONG><a name="[17]"></a>light_ctl_timeout_handle</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, light_controller_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = light_ctl_timeout_handle &rArr; light_lighten &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lighten
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_controller_app.o(.text)
</UL>
<P><STRONG><a name="[25b]"></a>release_action</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, light_controller_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_timeout_handle
</UL>

<P><STRONG><a name="[25f]"></a>light_controller_timer_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, light_controller_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_breath
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_set_lightness_linear
</UL>

<P><STRONG><a name="[18]"></a>unprov_timeout_cb</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, light_swtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unprov_timeout_cb &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_swtimer.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>change_scan_param_timeout_cb</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, light_swtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = change_scan_param_timeout_cb &rArr; app_send_msg_to_apptask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_msg_to_apptask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_swtimer.o(.text)
</UL>
<P><STRONG><a name="[2ac]"></a>KeyExpansion</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>

<P><STRONG><a name="[2a4]"></a>AddRoundKey</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[2a5]"></a>SubBytes</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[2a6]"></a>ShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[2a0]"></a>MixColumns</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[2a2]"></a>InvMixColumns</STRONG> (Thumb, 984 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[2a9]"></a>InvSubBytes</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InvSubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[2a8]"></a>InvShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[2a3]"></a>Cipher</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>

<P><STRONG><a name="[2a7]"></a>InvCipher</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[2a1]"></a>xtime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
</UL>

<P><STRONG><a name="[2ab]"></a>BlockCopy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>

<P><STRONG><a name="[2ae]"></a>XorWithIv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XorWithIv
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[2b0]"></a>data_uart_vsprintf</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, data_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = data_uart_vsprintf &rArr; data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_char
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_debug
</UL>

<P><STRONG><a name="[2af]"></a>data_uart_send_char</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, data_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_uart_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagState
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_send_string
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_dump
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_uart_vsprintf
</UL>

<P><STRONG><a name="[2c1]"></a>gap_sched_interwave_scan_start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gap_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_sched_interwave_scan_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_start
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_scan_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_run
</UL>

<P><STRONG><a name="[1a]"></a>beacon_timeout_cb</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mesh_beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = beacon_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_beacon.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>tick_timer_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mesh_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tick_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_common.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>mesh_service_timeout_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mesh_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_service_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_service.o(.text)
</UL>
<P><STRONG><a name="[384]"></a>frnd_clear</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = frnd_clear &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_frnd_poll
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_timeout
</UL>

<P><STRONG><a name="[1d]"></a>fn_timeout_cb</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fn_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friendship_fn.o(.text)
</UL>
<P><STRONG><a name="[397]"></a>fn_handle_frnd_poll</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, friendship_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = fn_handle_frnd_poll &rArr; frnd_clear &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_restart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_create
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_to_key_refresh_flag
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_frnd_upd
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_handle_msg
</UL>

<P><STRONG><a name="[382]"></a>iv_index_get_tx_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, friendship_fn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_frnd_queue_add_frnd_upd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_conf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_conf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_offer
</UL>

<P><STRONG><a name="[39f]"></a>prov_send</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prov_send &rArr; pb_adv_send &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_binary
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_timer_restart
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_send
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_value_set
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_random
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_confirmation
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_public_key
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_data
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_invite
</UL>

<P><STRONG><a name="[3a3]"></a>prov_handle_invite</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = prov_handle_invite &rArr; prov_send &rArr; pb_adv_send &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attn_timer_start
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_cap_check
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[3a5]"></a>prov_handle_data</STRONG> (Thumb, 428 bytes, Stack size 128 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = prov_handle_data &rArr; net_key_update &rArr; mesh_k2 &rArr; mesh_s1 &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_node_clear
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_stop
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_timer_start
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_set
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_clear
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_refresh
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_crypto
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_identity_adv_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_adv_start
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_start
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[3a8]"></a>prov_handle_start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prov_handle_start &rArr; prov_start_check
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_start_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[3a9]"></a>prov_handle_public_key</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = prov_handle_public_key &rArr; prov_ecdh_secret_gen &rArr; ecdh_shared_secret &rArr; ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_conf_keys_gen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecdh_secret_gen
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ecc_key_validate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[3aa]"></a>prov_handle_confirmation</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prov_handle_confirmation &rArr; prov_send &rArr; pb_adv_send &rArr; msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[3ab]"></a>prov_handle_random</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, provision_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = prov_handle_random &rArr; prov_data_keys_gen &rArr; AES_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data_keys_gen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirmation_gen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_receive
</UL>

<P><STRONG><a name="[3b0]"></a>mesh_flash_init</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, mesh_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_load
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore_node_state
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_clear
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_restore
</UL>

<P><STRONG><a name="[482]"></a>_cfg_check_header_valid</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtl876x_lib_cfg_int.o(i._cfg_check_header_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _cfg_check_header_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_find_item
</UL>

<P><STRONG><a name="[483]"></a>_cfg_write_to_flash</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, rtl876x_lib_cfg_int.o(i._cfg_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _cfg_write_to_flash &rArr; flash_sw_protect_unlock_by_addr_locked &rArr; flash_sw_protect_unlock_by_addr_new
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_zalloc_intern
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_locked
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_locked
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_direct
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sw_protect_unlock_by_addr_locked
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_block_protect_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_add_item
</UL>

<P><STRONG><a name="[3c0]"></a>ccm_auth_crypt</STRONG> (Thumb, 690 bytes, Stack size 104 bytes, ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ccm_auth_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes128_ecb_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_encrypt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_decrypt
</UL>

<P><STRONG><a name="[3c9]"></a>vli_cmp</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_add
</UL>

<P><STRONG><a name="[3c1]"></a>vli_lshift</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_lshift
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[3d0]"></a>vli_rshift1</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
</UL>

<P><STRONG><a name="[3c8]"></a>vli_add</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_sub
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_add
</UL>

<P><STRONG><a name="[3ca]"></a>vli_sub</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_sub
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_add
</UL>

<P><STRONG><a name="[3c5]"></a>mul_64_64</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mul_64_64
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
</UL>

<P><STRONG><a name="[3c6]"></a>add_128_128</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
</UL>

<P><STRONG><a name="[3c4]"></a>vli_square</STRONG> (Thumb, 246 bytes, Stack size 104 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_128_128
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_64_64
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
</UL>

<P><STRONG><a name="[3c7]"></a>vli_mod_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_mod_add &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add_c
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
</UL>

<P><STRONG><a name="[3cb]"></a>vli_mmod_fast</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vli_mmod_fast &rArr; vli_lshift
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_lshift
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
</UL>

<P><STRONG><a name="[3cd]"></a>vli_mod_inv</STRONG> (Thumb, 300 bytes, Stack size 152 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vli_mod_inv &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_is_zero
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
</UL>

<P><STRONG><a name="[3d1]"></a>ecc_point_double_jacobian</STRONG> (Thumb, 274 bytes, Stack size 88 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ecc_point_double_jacobian &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_sub
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_test_bit
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_is_zero
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_add
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
</UL>

<P><STRONG><a name="[3d6]"></a>apply_z</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = apply_z &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
</UL>

<P><STRONG><a name="[3d7]"></a>xycz_add</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xycz_add &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_sub
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
</UL>

<P><STRONG><a name="[3d8]"></a>xycz_add_c</STRONG> (Thumb, 238 bytes, Stack size 120 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_square_fast
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_sub
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
</UL>

<P><STRONG><a name="[3d9]"></a>ecc_point_mult</STRONG> (Thumb, 354 bytes, Stack size 248 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ecc_point_mult &rArr; xycz_add_c &rArr; vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_sub
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_test_bit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add_c
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdh_shared_secret
</UL>

<P><STRONG><a name="[3da]"></a>ecc_bytes2native</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ecc_bytes2native
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdh_shared_secret
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
</UL>

<P><STRONG><a name="[3cf]"></a>vli_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
</UL>

<P><STRONG><a name="[3ce]"></a>vli_is_zero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdh_shared_secret
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
</UL>

<P><STRONG><a name="[3db]"></a>vli_is_zero_xy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
</UL>

<P><STRONG><a name="[3d5]"></a>vli_test_bit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vli_test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
</UL>

<P><STRONG><a name="[3cc]"></a>vli_set</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add_c
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_inv
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[3d4]"></a>vli_mod_sub</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_mod_sub &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add_c
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
</UL>

<P><STRONG><a name="[3d3]"></a>vli_mod_mult_fast</STRONG> (Thumb, 24 bytes, Stack size 72 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vli_mod_mult_fast &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_mult
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add_c
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
</UL>

<P><STRONG><a name="[3d2]"></a>vli_mod_square_fast</STRONG> (Thumb, 22 bytes, Stack size 72 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vli_mod_square_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_validate_key
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add_c
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xycz_add
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_double_jacobian
</UL>

<P><STRONG><a name="[3dc]"></a>ecc_native2bytes</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ecc_native2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdh_shared_secret
</UL>

<P><STRONG><a name="[3dd]"></a>vli_mult</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_128_128
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_64_64
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mod_mult_fast
</UL>

<P><STRONG><a name="[1f]"></a>prov_server_handle_disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, provision_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prov_server_handle_disconnect &rArr; prov_service_handle_disc &rArr; prov_handle_disconnect &rArr; prov_ecc_key_gen &rArr; plt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_service_handle_disc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_server.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>proxy_server_handle_disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, proxy_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proxy_server_handle_disconnect &rArr; proxy_service_handle_disc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ctx_get_link
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_handle_disc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy_server.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>trans_timeout_cb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mesh_transport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trans_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_transport.o(.text)
</UL>
<P><STRONG><a name="[3f4]"></a>iv_index_get_tx_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mesh_transport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_need_retransmit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_tx_queue_pop
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_send_seg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg_ack
</UL>

<P><STRONG><a name="[24]"></a>pb_adv_timeout_cb</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pb_adv_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> provision_adv.o(.text)
</UL>
<P><STRONG><a name="[415]"></a>link_open</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = link_open &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_open
</UL>

<P><STRONG><a name="[416]"></a>link_ack</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = link_ack &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
</UL>

<P><STRONG><a name="[417]"></a>link_close</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = link_close &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_close
</UL>

<P><STRONG><a name="[418]"></a>msg_send</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = msg_send &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8EtsGen
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_send
</UL>

<P><STRONG><a name="[23]"></a>msg_ack_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, provision_adv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> provision_adv.o(.text)
</UL>
<P><STRONG><a name="[41a]"></a>msg_ack</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = msg_ack &rArr; bearer_send &rArr; gap_sched_try &rArr; gap_sched_run &rArr; gap_sched_adv &rArr; gap_sched_timer_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_send
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive_sar
</UL>

<P><STRONG><a name="[41b]"></a>pb_adv_clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, provision_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pb_adv_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_handle_timeout
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_deinit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_receive
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_adv_link_close
</UL>

<P><STRONG><a name="[25]"></a>proxy_rx_timeout_cb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, proxy_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = proxy_rx_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plt_timer_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy_protocol.o(.text)
</UL>
<P><STRONG><a name="[42c]"></a>frnd_clear</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, friendship_lpn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_buffer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_sched_task_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_seq_use
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_msg_cfg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_index_get_tx_value
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_clear
</UL>

<P><STRONG><a name="[26]"></a>lpn_timeout_cb</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lpn_timeout_cb &rArr; mesh_inner_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_inner_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friendship_lpn.o(.text)
</UL>
<P><STRONG><a name="[433]"></a>lpn_ctx_clear</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, friendship_lpn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lpn_ctx_clear &rArr; net_key_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_handle_timeout
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_clear
</UL>

<P><STRONG><a name="[429]"></a>iv_index_get_tx_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, friendship_lpn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_sub_list_add_rm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_poll
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_req
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear
</UL>

<P><STRONG><a name="[43e]"></a>cfg_server_send</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = cfg_server_send &rArr; access_send &rArr; trans_send &rArr; trans_send_seg &rArr; mesh_seq_use &rArr; iv_index_update &rArr; rpl_clear &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_hb_sub_stat
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_hb_pub_stat
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_key_refresh_phase_stat
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_lpn_poll_timeout_stat
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_frnd_stat
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_node_reset_stat
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_app_list
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_app_stat
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_node_identity_stat
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_list
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_app_key_stat
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_list
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_key_stat
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_list
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_sub_stat
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_model_pub_stat
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_net_transmit_stat
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_relay_stat
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_proxy_stat
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_default_ttl_stat
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_beacon_stat
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_compo_data_stat
</UL>

<P><STRONG><a name="[455]"></a>cfg_server_model_sync_by_app_key</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, configuration_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = cfg_server_model_sync_by_app_key &rArr; mesh_flash_store &rArr; mesh_flash_init &rArr; mesh_flash_clear &rArr;  mesh_flash_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_store
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_app_key_delete
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_server_handle_net_key_delete
</UL>

<P><STRONG><a name="[476]"></a>iv_index_get_tx_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, transport_ping.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_pong
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ping
</UL>

<P><STRONG><a name="[49b]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[491]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[28]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
